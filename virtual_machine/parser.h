/**
 * LR parser for C++ generated by the Syntax tool.
 *
 * https://www.npmjs.com/package/syntax-cli
 *
 *   npm install -g syntax-cli
 *
 *   syntax-cli --help
 *
 * To regenerate run:
 *
 *   syntax-cli \
 *     --grammar ~/path-to-grammar-file \
 *     --mode <parsing-mode> \
 *     --output ~/ParserClassName.h
 */
#ifndef __Syntax_LR_Parser_h
#define __Syntax_LR_Parser_h

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"

#include <assert.h>
#include <array>
#include <iostream>
#include <map>
#include <memory>
#include <regex>
#include <sstream>
#include <string>
#include <vector>

// ------------------------------------
// Module include prologue.
//
// Should include at least value/result type:
//
// type Value = <...>;
//
// Or struct Value { ... };
//
// Can also include parsing hooks:
//
//   void onParseBegin(const Parser& parser, const std::string& str) {
//     ...
//   }
//
//   void onParseBegin(const Parser& parser, const Value& result) {
//     ...
//   }
//
// clang-format off
#include <string>
#include <vector>
#include <memory>

/**
 * Expression type.
 */
enum class ExpType {
  NUMBER,
  STRING,
  SYMBOL,
  BINARY_EXP,
  IF_EXP,
  VAR_DECLARATION,
  BLOCK, // For statement lists or programs
  ASSIGNMENT
};

/**
 * Expression.
 */
struct Exp {
  ExpType type;

  // For NUMBER
  int number;

  // For STRING and SYMBOL
  std::string string;

  // For BINARY_EXP
  std::string op;
  std::shared_ptr<Exp> left;
  std::shared_ptr<Exp> right;

  // For IF_EXP
  std::shared_ptr<Exp> condition;
  std::shared_ptr<Exp> thenBranch;
  std::shared_ptr<Exp> elseBranch;


  // For VAR_DECLARATION
  std::string varName;
  std::shared_ptr<Exp> varValue;

  // For BLOCK
  std::vector<std::shared_ptr<Exp>> statements;

  // Constructors:
  // For NUMBER
  Exp(int number) : type(ExpType::NUMBER), number(number) {}

  // For STRING and SYMBOL
  Exp(const std::string& strVal) {
    if (strVal[0] == '"') {
      type = ExpType::STRING;
      string = strVal.substr(1, strVal.size() - 2);
    } else {
      type = ExpType::SYMBOL;
      string = strVal;
    }
  }

  // For VAR_DECLARATION
  Exp(ExpType expType, const std::string& varName, std::shared_ptr<Exp> varValue)
      : type(expType), varName(varName), varValue(varValue) {}

  // For BINARY_EXP
  Exp(const std::string& op, std::shared_ptr<Exp> left, std::shared_ptr<Exp> right)
      : type(ExpType::BINARY_EXP), op(op), left(left), right(right) {}

  // For IF_EXP
  Exp(ExpType expType, std::shared_ptr<Exp> condition, std::shared_ptr<Exp> thenBranch, std::shared_ptr<Exp> elseBranch)
      : type(expType), condition(condition), thenBranch(thenBranch), elseBranch(elseBranch) {}

  // For BLOCK
  Exp(const std::vector<std::shared_ptr<Exp>>& statements)
      : type(ExpType::BLOCK), statements(statements) {}


};

using Value = std::shared_ptr<Exp>;  // clang-format on

namespace syntax {

/**
 * Tokenizer class.
 */
// clang-format off
/**
 * Generic tokenizer used by the parser in the Syntax tool.
 *
 * https://www.npmjs.com/package/syntax-cli
 */

#ifndef __Syntax_Tokenizer_h
#define __Syntax_Tokenizer_h

class Tokenizer;

// ------------------------------------------------------------------
// TokenType.

enum class TokenType {
  __EMPTY = -1,
  // clang-format off
  SEMICOLON = 10,
  L_BRACE = 11,
  R_BRACE = 12,
  SYMBOL = 13,
  ASSIGN = 14,
  VAR = 15,
  PLUS = 16,
  MINUS = 17,
  EQUALS = 18,
  NOT_EQUALS = 19,
  LESS = 20,
  GREATER = 21,
  LESS_EQUAL = 22,
  GREATER_EQUAL = 23,
  MULTIPLY = 24,
  DIVIDE = 25,
  L_PAREN = 26,
  R_PAREN = 27,
  NUMBER = 28,
  STRING = 29,
  IF = 30,
  __EOF = 31
  // clang-format on
};

// ------------------------------------------------------------------
// Token.

struct Token {
  TokenType type;
  std::string value;

  int startOffset;
  int endOffset;
  int startLine;
  int endLine;
  int startColumn;
  int endColumn;
};

using SharedToken = std::shared_ptr<Token>;

typedef TokenType (*LexRuleHandler)(const Tokenizer&, const std::string&);

// ------------------------------------------------------------------
// Lex rule: [regex, handler]

struct LexRule {
  std::regex regex;
  LexRuleHandler handler;
};

// ------------------------------------------------------------------
// Token.

enum TokenizerState {
  // clang-format off
  INITIAL
  // clang-format on
};

// ------------------------------------------------------------------
// Tokenizer.

class Tokenizer {
 public:
  /**
   * Initializes a parsing string.
   */
  void initString(const std::string& str) {
    str_ = str;

    // Initialize states.
    states_.clear();
    states_.push_back(TokenizerState::INITIAL);

    cursor_ = 0;
    currentLine_ = 1;
    currentColumn_ = 0;
    currentLineBeginOffset_ = 0;

    tokenStartOffset_ = 0;
    tokenEndOffset_ = 0;
    tokenStartLine_ = 0;
    tokenEndLine_ = 0;
    tokenStartColumn_ = 0;
    tokenEndColumn_ = 0;
  }

  /**
   * Whether there are still tokens in the stream.
   */
  inline bool hasMoreTokens() { return cursor_ <= str_.length(); }

  /**
   * Returns current tokenizing state.
   */
  TokenizerState getCurrentState() { return states_.back(); }

  /**
   * Enters a new state pushing it on the states stack.
   */
  void pushState(TokenizerState state) { states_.push_back(state); }

  /**
   * Alias for `push_state`.
   */
  void begin(TokenizerState state) { states_.push_back(state); }

  /**
   * Exits a current state popping it from the states stack.
   */
  TokenizerState popState() {
    auto state = states_.back();
    states_.pop_back();
    return state;
  }

  /**
   * Returns next token.
   */
  SharedToken getNextToken() {
    if (!hasMoreTokens()) {
      yytext = __EOF;
      return toToken(TokenType::__EOF);
    }

    auto strSlice = str_.substr(cursor_);

    auto lexRulesForState = lexRulesByStartConditions_.at(getCurrentState());

    for (const auto& ruleIndex : lexRulesForState) {
      auto rule = lexRules_[ruleIndex];
      std::smatch sm;

      if (std::regex_search(strSlice, sm, rule.regex)) {
        yytext = sm[0];

        captureLocations_(yytext);
        cursor_ += yytext.length();

        // Manual handling of EOF token (the end of string). Return it
        // as `EOF` symbol.
        if (yytext.length() == 0) {
          cursor_++;
        }

        auto tokenType = rule.handler(*this, yytext);

        if (tokenType == TokenType::__EMPTY) {
          return getNextToken();
        }

        return toToken(tokenType);
      }
    }

    if (isEOF()) {
      cursor_++;
      yytext = __EOF;
      return toToken(TokenType::__EOF);
    }

    throwUnexpectedToken(std::string(1, strSlice[0]), currentLine_,
                         currentColumn_);
  }

  /**
   * Whether the cursor is at the EOF.
   */
  inline bool isEOF() { return cursor_ == str_.length(); }

  SharedToken toToken(TokenType tokenType) {
    return std::shared_ptr<Token>(new Token{
        .type = tokenType,
        .value = yytext,
        .startOffset = tokenStartOffset_,
        .endOffset = tokenEndOffset_,
        .startLine = tokenStartLine_,
        .endLine = tokenEndLine_,
        .startColumn = tokenStartColumn_,
        .endColumn = tokenEndColumn_,
    });
  }

  /**
   * Throws default "Unexpected token" exception, showing the actual
   * line from the source, pointing with the ^ marker to the bad token.
   * In addition, shows `line:column` location.
   */
  [[noreturn]] void throwUnexpectedToken(const std::string& symbol, int line,
                                         int column) {
    std::stringstream ss{str_};
    std::string lineStr;
    int currentLine = 1;

    while (currentLine++ <= line) {
      std::getline(ss, lineStr, '\n');
    }

    auto pad = std::string(column, ' ');

    std::stringstream errMsg;

    errMsg << "Syntax Error:\n\n"
           << lineStr << "\n"
           << pad << "^\nUnexpected token \"" << symbol << "\" at " << line
           << ":" << column << "\n\n";

    std::cerr << errMsg.str();
    throw new std::runtime_error(errMsg.str().c_str());
  }

  /**
   * Matched text.
   */
  std::string yytext;

 private:
  /**
   * Captures token locations.
   */
  void captureLocations_(const std::string& matched) {
    auto len = matched.length();

    // Absolute offsets.
    tokenStartOffset_ = cursor_;

    // Line-based locations, start.
    tokenStartLine_ = currentLine_;
    tokenStartColumn_ = tokenStartOffset_ - currentLineBeginOffset_;

    // Extract `\n` in the matched token.
    std::stringstream ss{matched};
    std::string lineStr;
    std::getline(ss, lineStr, '\n');
    while (ss.tellg() > 0 && ss.tellg() <= len) {
      currentLine_++;
      currentLineBeginOffset_ = tokenStartOffset_ + ss.tellg();
      std::getline(ss, lineStr, '\n');
    }

    tokenEndOffset_ = cursor_ + len;

    // Line-based locations, end.
    tokenEndLine_ = currentLine_;
    tokenEndColumn_ = tokenEndOffset_ - currentLineBeginOffset_;
    currentColumn_ = tokenEndColumn_;
  }

  /**
   * Lexical rules.
   */
  // clang-format off
  static constexpr size_t LEX_RULES_COUNT = 24;
  static std::array<LexRule, LEX_RULES_COUNT> lexRules_;
  static std::map<TokenizerState, std::vector<size_t>> lexRulesByStartConditions_;
  // clang-format on

  /**
   * Special EOF token.
   */
  static std::string __EOF;

  /**
   * Tokenizing string.
   */
  std::string str_;

  /**
   * Cursor for current symbol.
   */
  int cursor_;

  /**
   * States.
   */
  std::vector<TokenizerState> states_;

  /**
   * Line-based location tracking.
   */
  int currentLine_;
  int currentColumn_;
  int currentLineBeginOffset_;

  /**
   * Location data of a matched token.
   */
  int tokenStartOffset_;
  int tokenEndOffset_;
  int tokenStartLine_;
  int tokenEndLine_;
  int tokenStartColumn_;
  int tokenEndColumn_;
};

// ------------------------------------------------------------------
// Lexical rule handlers.

std::string Tokenizer::__EOF("$");

// clang-format off
inline TokenType _lexRule1(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::__EMPTY;
}

inline TokenType _lexRule2(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::__EMPTY;
}

inline TokenType _lexRule3(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::__EMPTY;
}

inline TokenType _lexRule4(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::L_PAREN;
}

inline TokenType _lexRule5(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::R_PAREN;
}

inline TokenType _lexRule6(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::PLUS;
}

inline TokenType _lexRule7(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::MINUS;
}

inline TokenType _lexRule8(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::MULTIPLY;
}

inline TokenType _lexRule9(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::DIVIDE;
}

inline TokenType _lexRule10(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::EQUALS;
}

inline TokenType _lexRule11(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::NOT_EQUALS;
}

inline TokenType _lexRule12(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::LESS_EQUAL;
}

inline TokenType _lexRule13(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::GREATER_EQUAL;
}

inline TokenType _lexRule14(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::LESS;
}

inline TokenType _lexRule15(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::GREATER;
}

inline TokenType _lexRule16(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::IF;
}

inline TokenType _lexRule17(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::VAR;
}

inline TokenType _lexRule18(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::ASSIGN;
}

inline TokenType _lexRule19(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::SEMICOLON;
}

inline TokenType _lexRule20(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::L_BRACE;
}

inline TokenType _lexRule21(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::R_BRACE;
}

inline TokenType _lexRule22(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::STRING;
}

inline TokenType _lexRule23(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::NUMBER;
}

inline TokenType _lexRule24(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::SYMBOL;
}
// clang-format on

// ------------------------------------------------------------------
// Lexical rules.

// clang-format off
std::array<LexRule, Tokenizer::LEX_RULES_COUNT> Tokenizer::lexRules_ = {{
  {std::regex(R"(^\/\/.*)"), &_lexRule1},
  {std::regex(R"(^\/\*[\s\S]*?\*\/)"), &_lexRule2},
  {std::regex(R"(^\s+)"), &_lexRule3},
  {std::regex(R"(^\()"), &_lexRule4},
  {std::regex(R"(^\))"), &_lexRule5},
  {std::regex(R"(^\+)"), &_lexRule6},
  {std::regex(R"(^-)"), &_lexRule7},
  {std::regex(R"(^\*)"), &_lexRule8},
  {std::regex(R"(^\/)"), &_lexRule9},
  {std::regex(R"(^==)"), &_lexRule10},
  {std::regex(R"(^!=)"), &_lexRule11},
  {std::regex(R"(^<=)"), &_lexRule12},
  {std::regex(R"(^>=)"), &_lexRule13},
  {std::regex(R"(^<)"), &_lexRule14},
  {std::regex(R"(^>)"), &_lexRule15},
  {std::regex(R"(^if)"), &_lexRule16},
  {std::regex(R"(^var)"), &_lexRule17},
  {std::regex(R"(^=)"), &_lexRule18},
  {std::regex(R"(^;)"), &_lexRule19},
  {std::regex(R"(^\{)"), &_lexRule20},
  {std::regex(R"(^\})"), &_lexRule21},
  {std::regex(R"(^"[^\"]*")"), &_lexRule22},
  {std::regex(R"(^\d+)"), &_lexRule23},
  {std::regex(R"(^[\w]+)"), &_lexRule24}
}};
std::map<TokenizerState, std::vector<size_t>> Tokenizer::lexRulesByStartConditions_ =  {{TokenizerState::INITIAL, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23}}};
// clang-format on

#endif
// clang-format on

#define POP_V()              \
  parser.valuesStack.back(); \
  parser.valuesStack.pop_back()

#define POP_T()              \
  parser.tokensStack.back(); \
  parser.tokensStack.pop_back()

#define PUSH_VR() parser.valuesStack.push_back(__)
#define PUSH_TR() parser.tokensStack.push_back(__)

/**
 * Parsing table type.
 */
enum class TE {
  Accept,
  Shift,
  Reduce,
  Transit,
};

/**
 * Parsing table entry.
 */
struct TableEntry {
  TE type;
  int value;
};

// clang-format off
class parser;
// clang-format on

using yyparse = parser;

typedef void (*ProductionHandler)(yyparse&);

/**
 * Encoded production.
 *
 * opcode - encoded index
 * rhsLength - length of the RHS to pop.
 */
struct Production {
  int opcode;
  int rhsLength;
  ProductionHandler handler;
};

// Key: Encoded symbol (terminal or non-terminal) index
// Value: TableEntry
using Row = std::map<int, TableEntry>;

/**
 * Parser class.
 */
// clang-format off
class parser {
  // clang-format on
 public:
  /**
   * Parsing values stack.
   */
  std::vector<Value> valuesStack;

  /**
   * Token values stack.
   */
  std::vector<std::string> tokensStack;

  /**
   * Parsing states stack.
   */
  std::vector<int> statesStack;

  /**
   * Tokenizer.
   */
  Tokenizer tokenizer;

  /**
   * Previous state to calculate the next one.
   */
  int previousState;

  /**
   * Parses a string.
   */
  Value parse(const std::string& str) {
    // clang-format off
    
    // clang-format on

    // Initialize the tokenizer and the string.
    tokenizer.initString(str);

    // Initialize the stacks.
    valuesStack.clear();
    tokensStack.clear();
    statesStack.clear();

    // Initial 0 state.
    statesStack.push_back(0);

    auto token = tokenizer.getNextToken();
    auto shiftedToken = token;

    // Main parsing loop.
    for (;;) {
      auto state = statesStack.back();
      auto column = (int)token->type;

      if (table_[state].count(column) == 0) {
        throwUnexpectedToken(token);
      }

      auto entry = table_[state].at(column);

      // Shift a token, go to state.
      if (entry.type == TE::Shift) {
        // Push token.
        tokensStack.push_back(token->value);

        // Push next state number: "s5" -> 5
        statesStack.push_back(entry.value);

        shiftedToken = token;
        token = tokenizer.getNextToken();
      }

      // Reduce by production.
      else if (entry.type == TE::Reduce) {
        auto productionNumber = entry.value;
        auto production = productions_[productionNumber];

        tokenizer.yytext = shiftedToken->value;

        auto rhsLength = production.rhsLength;
        while (rhsLength > 0) {
          statesStack.pop_back();
          rhsLength--;
        }

        // Call the handler.
        production.handler(*this);

        auto previousState = statesStack.back();

        auto symbolToReduceWith = production.opcode;
        auto nextStateEntry = table_[previousState].at(symbolToReduceWith);
        assert(nextStateEntry.type == TE::Transit);

        statesStack.push_back(nextStateEntry.value);
      }

      // Accept the string.
      else if (entry.type == TE::Accept) {
        // Pop state number.
        statesStack.pop_back();

        // Pop the parsed value.
        // clang-format off
        auto result = valuesStack.back(); valuesStack.pop_back();
        // clang-format on

        if (statesStack.size() != 1 || statesStack.back() != 0 ||
            tokenizer.hasMoreTokens()) {
          throwUnexpectedToken(token);
        }

        statesStack.pop_back();

        // clang-format off
        
        // clang-format on

        return result;
      }
    }
  }

 private:
  /**
   * Throws parser error on unexpected token.
   */
  [[noreturn]] void throwUnexpectedToken(SharedToken token) {
    if (token->type == TokenType::__EOF && !tokenizer.hasMoreTokens()) {
      std::string errMsg = "Unexpected end of input.\n";
      std::cerr << errMsg;
      throw std::runtime_error(errMsg.c_str());
    }
    tokenizer.throwUnexpectedToken(token->value, token->startLine,
                                   token->startColumn);
  }

  // clang-format off
  static constexpr size_t PRODUCTIONS_COUNT = 30;
  static std::array<Production, PRODUCTIONS_COUNT> productions_;

  static constexpr size_t ROWS_COUNT = 57;
  static std::array<Row, ROWS_COUNT> table_;
  // clang-format on
};

// ------------------------------------------------------------------
// Productions.

// clang-format off
void _handler1(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_V();

auto __ = _1;

 // Semantic action epilogue.
PUSH_VR();

}

void _handler2(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_V();

auto __ = _1;

 // Semantic action epilogue.
PUSH_VR();

}

void _handler3(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_V();

auto __ = std::make_shared<Exp>(std::vector<std::shared_ptr<Exp>>{ _1 });

 // Semantic action epilogue.
PUSH_VR();

}

void _handler4(yyparse& parser) {
// Semantic action prologue.
auto _2 = POP_V();
auto _1 = POP_V();

_1->statements.push_back(_2); auto __ = _1;

 // Semantic action epilogue.
PUSH_VR();

}

void _handler5(yyparse& parser) {
// Semantic action prologue.
parser.tokensStack.pop_back();
auto _1 = POP_V();

auto __ = _1;

 // Semantic action epilogue.
PUSH_VR();

}

void _handler6(yyparse& parser) {
// Semantic action prologue.
parser.tokensStack.pop_back();
auto _1 = POP_V();

auto __ = _1;

 // Semantic action epilogue.
PUSH_VR();

}

void _handler7(yyparse& parser) {
// Semantic action prologue.
parser.tokensStack.pop_back();
auto _1 = POP_V();

auto __ = _1;

 // Semantic action epilogue.
PUSH_VR();

}

void _handler8(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_V();

auto __ = _1;

 // Semantic action epilogue.
PUSH_VR();

}

void _handler9(yyparse& parser) {
// Semantic action prologue.
parser.tokensStack.pop_back();
auto _2 = POP_V();
parser.tokensStack.pop_back();

auto __ = std::make_shared<Exp>(_2->statements);

 // Semantic action epilogue.
PUSH_VR();

}

void _handler10(yyparse& parser) {
// Semantic action prologue.
auto _3 = POP_V();
parser.tokensStack.pop_back();
auto _1 = POP_T();

auto __ = std::make_shared<Exp>(ExpType::ASSIGNMENT, _1, _3);

 // Semantic action epilogue.
PUSH_VR();

}

void _handler11(yyparse& parser) {
// Semantic action prologue.
auto _4 = POP_V();
parser.tokensStack.pop_back();
auto _2 = POP_T();
parser.tokensStack.pop_back();

auto __ = std::make_shared<Exp>(ExpType::VAR_DECLARATION, _2, _4);

 // Semantic action epilogue.
PUSH_VR();

}

void _handler12(yyparse& parser) {
// Semantic action prologue.
auto _3 = POP_V();
parser.tokensStack.pop_back();
auto _1 = POP_V();

auto __ = std::make_shared<Exp>("+", _1, _3);

 // Semantic action epilogue.
PUSH_VR();

}

void _handler13(yyparse& parser) {
// Semantic action prologue.
auto _3 = POP_V();
parser.tokensStack.pop_back();
auto _1 = POP_V();

auto __ = std::make_shared<Exp>("-", _1, _3);

 // Semantic action epilogue.
PUSH_VR();

}

void _handler14(yyparse& parser) {
// Semantic action prologue.
auto _3 = POP_V();
parser.tokensStack.pop_back();
auto _1 = POP_V();

auto __ = std::make_shared<Exp>("==", _1, _3);

 // Semantic action epilogue.
PUSH_VR();

}

void _handler15(yyparse& parser) {
// Semantic action prologue.
auto _3 = POP_V();
parser.tokensStack.pop_back();
auto _1 = POP_V();

auto __ = std::make_shared<Exp>("!=", _1, _3);

 // Semantic action epilogue.
PUSH_VR();

}

void _handler16(yyparse& parser) {
// Semantic action prologue.
auto _3 = POP_V();
parser.tokensStack.pop_back();
auto _1 = POP_V();

auto __ = std::make_shared<Exp>("<", _1, _3);

 // Semantic action epilogue.
PUSH_VR();

}

void _handler17(yyparse& parser) {
// Semantic action prologue.
auto _3 = POP_V();
parser.tokensStack.pop_back();
auto _1 = POP_V();

auto __ = std::make_shared<Exp>(">", _1, _3);

 // Semantic action epilogue.
PUSH_VR();

}

void _handler18(yyparse& parser) {
// Semantic action prologue.
auto _3 = POP_V();
parser.tokensStack.pop_back();
auto _1 = POP_V();

auto __ = std::make_shared<Exp>("<=", _1, _3);

 // Semantic action epilogue.
PUSH_VR();

}

void _handler19(yyparse& parser) {
// Semantic action prologue.
auto _3 = POP_V();
parser.tokensStack.pop_back();
auto _1 = POP_V();

auto __ = std::make_shared<Exp>(">=", _1, _3);

 // Semantic action epilogue.
PUSH_VR();

}

void _handler20(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_V();

auto __ = _1;

 // Semantic action epilogue.
PUSH_VR();

}

void _handler21(yyparse& parser) {
// Semantic action prologue.
auto _3 = POP_V();
parser.tokensStack.pop_back();
auto _1 = POP_V();

auto __ = std::make_shared<Exp>("*", _1, _3);

 // Semantic action epilogue.
PUSH_VR();

}

void _handler22(yyparse& parser) {
// Semantic action prologue.
auto _3 = POP_V();
parser.tokensStack.pop_back();
auto _1 = POP_V();

auto __ = std::make_shared<Exp>("/", _1, _3);

 // Semantic action epilogue.
PUSH_VR();

}

void _handler23(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_V();

auto __ = _1;

 // Semantic action epilogue.
PUSH_VR();

}

void _handler24(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_V();

auto __ = _1;

 // Semantic action epilogue.
PUSH_VR();

}

void _handler25(yyparse& parser) {
// Semantic action prologue.
parser.tokensStack.pop_back();
auto _2 = POP_V();
parser.tokensStack.pop_back();

auto __ = _2;

 // Semantic action epilogue.
PUSH_VR();

}

void _handler26(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_T();

auto __ = std::make_shared<Exp>(std::stoi(_1));

 // Semantic action epilogue.
PUSH_VR();

}

void _handler27(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_T();

auto __ = std::make_shared<Exp>(_1);

 // Semantic action epilogue.
PUSH_VR();

}

void _handler28(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_T();

auto __ = std::make_shared<Exp>(_1);

 // Semantic action epilogue.
PUSH_VR();

}

void _handler29(yyparse& parser) {
// Semantic action prologue.
parser.tokensStack.pop_back();
auto _4 = POP_V();
auto _3 = POP_V();
parser.tokensStack.pop_back();
parser.tokensStack.pop_back();

auto __ = std::make_shared<Exp>(ExpType::IF_EXP, _3, _4, nullptr);

 // Semantic action epilogue.
PUSH_VR();

}

void _handler30(yyparse& parser) {
// Semantic action prologue.
parser.tokensStack.pop_back();
auto _5 = POP_V();
auto _4 = POP_V();
auto _3 = POP_V();
parser.tokensStack.pop_back();
parser.tokensStack.pop_back();

auto __ = std::make_shared<Exp>(ExpType::IF_EXP, _3, _4, _5);

 // Semantic action epilogue.
PUSH_VR();

}
// clang-format on

// clang-format off
std::array<Production, yyparse::PRODUCTIONS_COUNT> yyparse::productions_ = {{{-1, 1, &_handler1},
{0, 1, &_handler2},
{1, 1, &_handler3},
{1, 2, &_handler4},
{2, 2, &_handler5},
{2, 2, &_handler6},
{2, 2, &_handler7},
{2, 1, &_handler8},
{3, 3, &_handler9},
{4, 3, &_handler10},
{5, 4, &_handler11},
{6, 3, &_handler12},
{6, 3, &_handler13},
{6, 3, &_handler14},
{6, 3, &_handler15},
{6, 3, &_handler16},
{6, 3, &_handler17},
{6, 3, &_handler18},
{6, 3, &_handler19},
{6, 1, &_handler20},
{7, 3, &_handler21},
{7, 3, &_handler22},
{7, 1, &_handler23},
{8, 1, &_handler24},
{8, 3, &_handler25},
{8, 1, &_handler26},
{8, 1, &_handler27},
{8, 1, &_handler28},
{9, 5, &_handler29},
{9, 6, &_handler30}}};
// clang-format on

// ------------------------------------------------------------------
// Parsing table.

// clang-format off
std::array<Row, yyparse::ROWS_COUNT> yyparse::table_ = {
    Row {{0, {TE::Transit, 1}}, {1, {TE::Transit, 2}}, {2, {TE::Transit, 3}}, {3, {TE::Transit, 7}}, {4, {TE::Transit, 5}}, {5, {TE::Transit, 4}}, {6, {TE::Transit, 6}}, {7, {TE::Transit, 10}}, {8, {TE::Transit, 11}}, {9, {TE::Transit, 12}}, {11, {TE::Shift, 16}}, {13, {TE::Shift, 9}}, {15, {TE::Shift, 8}}, {26, {TE::Shift, 13}}, {28, {TE::Shift, 14}}, {29, {TE::Shift, 15}}},
    Row {{31, {TE::Accept, 0}}},
    Row {{2, {TE::Transit, 17}}, {3, {TE::Transit, 7}}, {4, {TE::Transit, 5}}, {5, {TE::Transit, 4}}, {6, {TE::Transit, 6}}, {7, {TE::Transit, 10}}, {8, {TE::Transit, 11}}, {9, {TE::Transit, 12}}, {11, {TE::Shift, 16}}, {13, {TE::Shift, 9}}, {15, {TE::Shift, 8}}, {26, {TE::Shift, 13}}, {28, {TE::Shift, 14}}, {29, {TE::Shift, 15}}, {31, {TE::Reduce, 1}}},
    Row {{11, {TE::Reduce, 2}}, {12, {TE::Reduce, 2}}, {13, {TE::Reduce, 2}}, {15, {TE::Reduce, 2}}, {26, {TE::Reduce, 2}}, {28, {TE::Reduce, 2}}, {29, {TE::Reduce, 2}}, {31, {TE::Reduce, 2}}},
    Row {{10, {TE::Shift, 18}}},
    Row {{10, {TE::Shift, 19}}},
    Row {{10, {TE::Shift, 20}}, {16, {TE::Shift, 21}}, {17, {TE::Shift, 22}}, {18, {TE::Shift, 23}}, {19, {TE::Shift, 24}}, {20, {TE::Shift, 25}}, {21, {TE::Shift, 26}}, {22, {TE::Shift, 27}}, {23, {TE::Shift, 28}}},
    Row {{11, {TE::Reduce, 7}}, {12, {TE::Reduce, 7}}, {13, {TE::Reduce, 7}}, {15, {TE::Reduce, 7}}, {26, {TE::Reduce, 7}}, {28, {TE::Reduce, 7}}, {29, {TE::Reduce, 7}}, {31, {TE::Reduce, 7}}},
    Row {{13, {TE::Shift, 50}}},
    Row {{10, {TE::Reduce, 27}}, {14, {TE::Shift, 53}}, {16, {TE::Reduce, 27}}, {17, {TE::Reduce, 27}}, {18, {TE::Reduce, 27}}, {19, {TE::Reduce, 27}}, {20, {TE::Reduce, 27}}, {21, {TE::Reduce, 27}}, {22, {TE::Reduce, 27}}, {23, {TE::Reduce, 27}}, {24, {TE::Reduce, 27}}, {25, {TE::Reduce, 27}}},
    Row {{10, {TE::Reduce, 19}}, {13, {TE::Reduce, 19}}, {16, {TE::Reduce, 19}}, {17, {TE::Reduce, 19}}, {18, {TE::Reduce, 19}}, {19, {TE::Reduce, 19}}, {20, {TE::Reduce, 19}}, {21, {TE::Reduce, 19}}, {22, {TE::Reduce, 19}}, {23, {TE::Reduce, 19}}, {24, {TE::Shift, 31}}, {25, {TE::Shift, 32}}, {26, {TE::Reduce, 19}}, {27, {TE::Reduce, 19}}, {28, {TE::Reduce, 19}}, {29, {TE::Reduce, 19}}},
    Row {{10, {TE::Reduce, 22}}, {13, {TE::Reduce, 22}}, {16, {TE::Reduce, 22}}, {17, {TE::Reduce, 22}}, {18, {TE::Reduce, 22}}, {19, {TE::Reduce, 22}}, {20, {TE::Reduce, 22}}, {21, {TE::Reduce, 22}}, {22, {TE::Reduce, 22}}, {23, {TE::Reduce, 22}}, {24, {TE::Reduce, 22}}, {25, {TE::Reduce, 22}}, {26, {TE::Reduce, 22}}, {27, {TE::Reduce, 22}}, {28, {TE::Reduce, 22}}, {29, {TE::Reduce, 22}}},
    Row {{10, {TE::Reduce, 23}}, {13, {TE::Reduce, 23}}, {16, {TE::Reduce, 23}}, {17, {TE::Reduce, 23}}, {18, {TE::Reduce, 23}}, {19, {TE::Reduce, 23}}, {20, {TE::Reduce, 23}}, {21, {TE::Reduce, 23}}, {22, {TE::Reduce, 23}}, {23, {TE::Reduce, 23}}, {24, {TE::Reduce, 23}}, {25, {TE::Reduce, 23}}, {26, {TE::Reduce, 23}}, {27, {TE::Reduce, 23}}, {28, {TE::Reduce, 23}}, {29, {TE::Reduce, 23}}},
    Row {{6, {TE::Transit, 34}}, {7, {TE::Transit, 10}}, {8, {TE::Transit, 11}}, {9, {TE::Transit, 12}}, {13, {TE::Shift, 30}}, {26, {TE::Shift, 13}}, {28, {TE::Shift, 14}}, {29, {TE::Shift, 15}}, {30, {TE::Shift, 35}}},
    Row {{10, {TE::Reduce, 25}}, {13, {TE::Reduce, 25}}, {16, {TE::Reduce, 25}}, {17, {TE::Reduce, 25}}, {18, {TE::Reduce, 25}}, {19, {TE::Reduce, 25}}, {20, {TE::Reduce, 25}}, {21, {TE::Reduce, 25}}, {22, {TE::Reduce, 25}}, {23, {TE::Reduce, 25}}, {24, {TE::Reduce, 25}}, {25, {TE::Reduce, 25}}, {26, {TE::Reduce, 25}}, {27, {TE::Reduce, 25}}, {28, {TE::Reduce, 25}}, {29, {TE::Reduce, 25}}},
    Row {{10, {TE::Reduce, 26}}, {13, {TE::Reduce, 26}}, {16, {TE::Reduce, 26}}, {17, {TE::Reduce, 26}}, {18, {TE::Reduce, 26}}, {19, {TE::Reduce, 26}}, {20, {TE::Reduce, 26}}, {21, {TE::Reduce, 26}}, {22, {TE::Reduce, 26}}, {23, {TE::Reduce, 26}}, {24, {TE::Reduce, 26}}, {25, {TE::Reduce, 26}}, {26, {TE::Reduce, 26}}, {27, {TE::Reduce, 26}}, {28, {TE::Reduce, 26}}, {29, {TE::Reduce, 26}}},
    Row {{1, {TE::Transit, 55}}, {2, {TE::Transit, 3}}, {3, {TE::Transit, 7}}, {4, {TE::Transit, 5}}, {5, {TE::Transit, 4}}, {6, {TE::Transit, 6}}, {7, {TE::Transit, 10}}, {8, {TE::Transit, 11}}, {9, {TE::Transit, 12}}, {11, {TE::Shift, 16}}, {13, {TE::Shift, 9}}, {15, {TE::Shift, 8}}, {26, {TE::Shift, 13}}, {28, {TE::Shift, 14}}, {29, {TE::Shift, 15}}},
    Row {{11, {TE::Reduce, 3}}, {12, {TE::Reduce, 3}}, {13, {TE::Reduce, 3}}, {15, {TE::Reduce, 3}}, {26, {TE::Reduce, 3}}, {28, {TE::Reduce, 3}}, {29, {TE::Reduce, 3}}, {31, {TE::Reduce, 3}}},
    Row {{11, {TE::Reduce, 4}}, {12, {TE::Reduce, 4}}, {13, {TE::Reduce, 4}}, {15, {TE::Reduce, 4}}, {26, {TE::Reduce, 4}}, {28, {TE::Reduce, 4}}, {29, {TE::Reduce, 4}}, {31, {TE::Reduce, 4}}},
    Row {{11, {TE::Reduce, 5}}, {12, {TE::Reduce, 5}}, {13, {TE::Reduce, 5}}, {15, {TE::Reduce, 5}}, {26, {TE::Reduce, 5}}, {28, {TE::Reduce, 5}}, {29, {TE::Reduce, 5}}, {31, {TE::Reduce, 5}}},
    Row {{11, {TE::Reduce, 6}}, {12, {TE::Reduce, 6}}, {13, {TE::Reduce, 6}}, {15, {TE::Reduce, 6}}, {26, {TE::Reduce, 6}}, {28, {TE::Reduce, 6}}, {29, {TE::Reduce, 6}}, {31, {TE::Reduce, 6}}},
    Row {{7, {TE::Transit, 29}}, {8, {TE::Transit, 11}}, {9, {TE::Transit, 12}}, {13, {TE::Shift, 30}}, {26, {TE::Shift, 13}}, {28, {TE::Shift, 14}}, {29, {TE::Shift, 15}}},
    Row {{7, {TE::Transit, 37}}, {8, {TE::Transit, 11}}, {9, {TE::Transit, 12}}, {13, {TE::Shift, 30}}, {26, {TE::Shift, 13}}, {28, {TE::Shift, 14}}, {29, {TE::Shift, 15}}},
    Row {{7, {TE::Transit, 39}}, {8, {TE::Transit, 11}}, {9, {TE::Transit, 12}}, {13, {TE::Shift, 30}}, {26, {TE::Shift, 13}}, {28, {TE::Shift, 14}}, {29, {TE::Shift, 15}}},
    Row {{7, {TE::Transit, 40}}, {8, {TE::Transit, 11}}, {9, {TE::Transit, 12}}, {13, {TE::Shift, 30}}, {26, {TE::Shift, 13}}, {28, {TE::Shift, 14}}, {29, {TE::Shift, 15}}},
    Row {{7, {TE::Transit, 41}}, {8, {TE::Transit, 11}}, {9, {TE::Transit, 12}}, {13, {TE::Shift, 30}}, {26, {TE::Shift, 13}}, {28, {TE::Shift, 14}}, {29, {TE::Shift, 15}}},
    Row {{7, {TE::Transit, 42}}, {8, {TE::Transit, 11}}, {9, {TE::Transit, 12}}, {13, {TE::Shift, 30}}, {26, {TE::Shift, 13}}, {28, {TE::Shift, 14}}, {29, {TE::Shift, 15}}},
    Row {{7, {TE::Transit, 43}}, {8, {TE::Transit, 11}}, {9, {TE::Transit, 12}}, {13, {TE::Shift, 30}}, {26, {TE::Shift, 13}}, {28, {TE::Shift, 14}}, {29, {TE::Shift, 15}}},
    Row {{7, {TE::Transit, 44}}, {8, {TE::Transit, 11}}, {9, {TE::Transit, 12}}, {13, {TE::Shift, 30}}, {26, {TE::Shift, 13}}, {28, {TE::Shift, 14}}, {29, {TE::Shift, 15}}},
    Row {{10, {TE::Reduce, 11}}, {13, {TE::Reduce, 11}}, {16, {TE::Reduce, 11}}, {17, {TE::Reduce, 11}}, {18, {TE::Reduce, 11}}, {19, {TE::Reduce, 11}}, {20, {TE::Reduce, 11}}, {21, {TE::Reduce, 11}}, {22, {TE::Reduce, 11}}, {23, {TE::Reduce, 11}}, {24, {TE::Shift, 31}}, {25, {TE::Shift, 32}}, {26, {TE::Reduce, 11}}, {27, {TE::Reduce, 11}}, {28, {TE::Reduce, 11}}, {29, {TE::Reduce, 11}}},
    Row {{10, {TE::Reduce, 27}}, {13, {TE::Reduce, 27}}, {16, {TE::Reduce, 27}}, {17, {TE::Reduce, 27}}, {18, {TE::Reduce, 27}}, {19, {TE::Reduce, 27}}, {20, {TE::Reduce, 27}}, {21, {TE::Reduce, 27}}, {22, {TE::Reduce, 27}}, {23, {TE::Reduce, 27}}, {24, {TE::Reduce, 27}}, {25, {TE::Reduce, 27}}, {26, {TE::Reduce, 27}}, {27, {TE::Reduce, 27}}, {28, {TE::Reduce, 27}}, {29, {TE::Reduce, 27}}},
    Row {{8, {TE::Transit, 33}}, {9, {TE::Transit, 12}}, {13, {TE::Shift, 30}}, {26, {TE::Shift, 13}}, {28, {TE::Shift, 14}}, {29, {TE::Shift, 15}}},
    Row {{8, {TE::Transit, 38}}, {9, {TE::Transit, 12}}, {13, {TE::Shift, 30}}, {26, {TE::Shift, 13}}, {28, {TE::Shift, 14}}, {29, {TE::Shift, 15}}},
    Row {{10, {TE::Reduce, 20}}, {13, {TE::Reduce, 20}}, {16, {TE::Reduce, 20}}, {17, {TE::Reduce, 20}}, {18, {TE::Reduce, 20}}, {19, {TE::Reduce, 20}}, {20, {TE::Reduce, 20}}, {21, {TE::Reduce, 20}}, {22, {TE::Reduce, 20}}, {23, {TE::Reduce, 20}}, {24, {TE::Reduce, 20}}, {25, {TE::Reduce, 20}}, {26, {TE::Reduce, 20}}, {27, {TE::Reduce, 20}}, {28, {TE::Reduce, 20}}, {29, {TE::Reduce, 20}}},
    Row {{16, {TE::Shift, 21}}, {17, {TE::Shift, 22}}, {18, {TE::Shift, 23}}, {19, {TE::Shift, 24}}, {20, {TE::Shift, 25}}, {21, {TE::Shift, 26}}, {22, {TE::Shift, 27}}, {23, {TE::Shift, 28}}, {27, {TE::Shift, 36}}},
    Row {{6, {TE::Transit, 45}}, {7, {TE::Transit, 10}}, {8, {TE::Transit, 11}}, {9, {TE::Transit, 12}}, {13, {TE::Shift, 30}}, {26, {TE::Shift, 13}}, {28, {TE::Shift, 14}}, {29, {TE::Shift, 15}}},
    Row {{10, {TE::Reduce, 24}}, {13, {TE::Reduce, 24}}, {16, {TE::Reduce, 24}}, {17, {TE::Reduce, 24}}, {18, {TE::Reduce, 24}}, {19, {TE::Reduce, 24}}, {20, {TE::Reduce, 24}}, {21, {TE::Reduce, 24}}, {22, {TE::Reduce, 24}}, {23, {TE::Reduce, 24}}, {24, {TE::Reduce, 24}}, {25, {TE::Reduce, 24}}, {26, {TE::Reduce, 24}}, {27, {TE::Reduce, 24}}, {28, {TE::Reduce, 24}}, {29, {TE::Reduce, 24}}},
    Row {{10, {TE::Reduce, 12}}, {13, {TE::Reduce, 12}}, {16, {TE::Reduce, 12}}, {17, {TE::Reduce, 12}}, {18, {TE::Reduce, 12}}, {19, {TE::Reduce, 12}}, {20, {TE::Reduce, 12}}, {21, {TE::Reduce, 12}}, {22, {TE::Reduce, 12}}, {23, {TE::Reduce, 12}}, {24, {TE::Shift, 31}}, {25, {TE::Shift, 32}}, {26, {TE::Reduce, 12}}, {27, {TE::Reduce, 12}}, {28, {TE::Reduce, 12}}, {29, {TE::Reduce, 12}}},
    Row {{10, {TE::Reduce, 21}}, {13, {TE::Reduce, 21}}, {16, {TE::Reduce, 21}}, {17, {TE::Reduce, 21}}, {18, {TE::Reduce, 21}}, {19, {TE::Reduce, 21}}, {20, {TE::Reduce, 21}}, {21, {TE::Reduce, 21}}, {22, {TE::Reduce, 21}}, {23, {TE::Reduce, 21}}, {24, {TE::Reduce, 21}}, {25, {TE::Reduce, 21}}, {26, {TE::Reduce, 21}}, {27, {TE::Reduce, 21}}, {28, {TE::Reduce, 21}}, {29, {TE::Reduce, 21}}},
    Row {{10, {TE::Reduce, 13}}, {13, {TE::Reduce, 13}}, {16, {TE::Reduce, 13}}, {17, {TE::Reduce, 13}}, {18, {TE::Reduce, 13}}, {19, {TE::Reduce, 13}}, {20, {TE::Reduce, 13}}, {21, {TE::Reduce, 13}}, {22, {TE::Reduce, 13}}, {23, {TE::Reduce, 13}}, {24, {TE::Shift, 31}}, {25, {TE::Shift, 32}}, {26, {TE::Reduce, 13}}, {27, {TE::Reduce, 13}}, {28, {TE::Reduce, 13}}, {29, {TE::Reduce, 13}}},
    Row {{10, {TE::Reduce, 14}}, {13, {TE::Reduce, 14}}, {16, {TE::Reduce, 14}}, {17, {TE::Reduce, 14}}, {18, {TE::Reduce, 14}}, {19, {TE::Reduce, 14}}, {20, {TE::Reduce, 14}}, {21, {TE::Reduce, 14}}, {22, {TE::Reduce, 14}}, {23, {TE::Reduce, 14}}, {24, {TE::Shift, 31}}, {25, {TE::Shift, 32}}, {26, {TE::Reduce, 14}}, {27, {TE::Reduce, 14}}, {28, {TE::Reduce, 14}}, {29, {TE::Reduce, 14}}},
    Row {{10, {TE::Reduce, 15}}, {13, {TE::Reduce, 15}}, {16, {TE::Reduce, 15}}, {17, {TE::Reduce, 15}}, {18, {TE::Reduce, 15}}, {19, {TE::Reduce, 15}}, {20, {TE::Reduce, 15}}, {21, {TE::Reduce, 15}}, {22, {TE::Reduce, 15}}, {23, {TE::Reduce, 15}}, {24, {TE::Shift, 31}}, {25, {TE::Shift, 32}}, {26, {TE::Reduce, 15}}, {27, {TE::Reduce, 15}}, {28, {TE::Reduce, 15}}, {29, {TE::Reduce, 15}}},
    Row {{10, {TE::Reduce, 16}}, {13, {TE::Reduce, 16}}, {16, {TE::Reduce, 16}}, {17, {TE::Reduce, 16}}, {18, {TE::Reduce, 16}}, {19, {TE::Reduce, 16}}, {20, {TE::Reduce, 16}}, {21, {TE::Reduce, 16}}, {22, {TE::Reduce, 16}}, {23, {TE::Reduce, 16}}, {24, {TE::Shift, 31}}, {25, {TE::Shift, 32}}, {26, {TE::Reduce, 16}}, {27, {TE::Reduce, 16}}, {28, {TE::Reduce, 16}}, {29, {TE::Reduce, 16}}},
    Row {{10, {TE::Reduce, 17}}, {13, {TE::Reduce, 17}}, {16, {TE::Reduce, 17}}, {17, {TE::Reduce, 17}}, {18, {TE::Reduce, 17}}, {19, {TE::Reduce, 17}}, {20, {TE::Reduce, 17}}, {21, {TE::Reduce, 17}}, {22, {TE::Reduce, 17}}, {23, {TE::Reduce, 17}}, {24, {TE::Shift, 31}}, {25, {TE::Shift, 32}}, {26, {TE::Reduce, 17}}, {27, {TE::Reduce, 17}}, {28, {TE::Reduce, 17}}, {29, {TE::Reduce, 17}}},
    Row {{10, {TE::Reduce, 18}}, {13, {TE::Reduce, 18}}, {16, {TE::Reduce, 18}}, {17, {TE::Reduce, 18}}, {18, {TE::Reduce, 18}}, {19, {TE::Reduce, 18}}, {20, {TE::Reduce, 18}}, {21, {TE::Reduce, 18}}, {22, {TE::Reduce, 18}}, {23, {TE::Reduce, 18}}, {24, {TE::Shift, 31}}, {25, {TE::Shift, 32}}, {26, {TE::Reduce, 18}}, {27, {TE::Reduce, 18}}, {28, {TE::Reduce, 18}}, {29, {TE::Reduce, 18}}},
    Row {{6, {TE::Transit, 46}}, {7, {TE::Transit, 10}}, {8, {TE::Transit, 11}}, {9, {TE::Transit, 12}}, {13, {TE::Shift, 30}}, {16, {TE::Shift, 21}}, {17, {TE::Shift, 22}}, {18, {TE::Shift, 23}}, {19, {TE::Shift, 24}}, {20, {TE::Shift, 25}}, {21, {TE::Shift, 26}}, {22, {TE::Shift, 27}}, {23, {TE::Shift, 28}}, {26, {TE::Shift, 13}}, {28, {TE::Shift, 14}}, {29, {TE::Shift, 15}}},
    Row {{6, {TE::Transit, 48}}, {7, {TE::Transit, 10}}, {8, {TE::Transit, 11}}, {9, {TE::Transit, 12}}, {13, {TE::Shift, 30}}, {16, {TE::Shift, 21}}, {17, {TE::Shift, 22}}, {18, {TE::Shift, 23}}, {19, {TE::Shift, 24}}, {20, {TE::Shift, 25}}, {21, {TE::Shift, 26}}, {22, {TE::Shift, 27}}, {23, {TE::Shift, 28}}, {26, {TE::Shift, 13}}, {27, {TE::Shift, 47}}, {28, {TE::Shift, 14}}, {29, {TE::Shift, 15}}},
    Row {{10, {TE::Reduce, 28}}, {13, {TE::Reduce, 28}}, {16, {TE::Reduce, 28}}, {17, {TE::Reduce, 28}}, {18, {TE::Reduce, 28}}, {19, {TE::Reduce, 28}}, {20, {TE::Reduce, 28}}, {21, {TE::Reduce, 28}}, {22, {TE::Reduce, 28}}, {23, {TE::Reduce, 28}}, {24, {TE::Reduce, 28}}, {25, {TE::Reduce, 28}}, {26, {TE::Reduce, 28}}, {27, {TE::Reduce, 28}}, {28, {TE::Reduce, 28}}, {29, {TE::Reduce, 28}}},
    Row {{16, {TE::Shift, 21}}, {17, {TE::Shift, 22}}, {18, {TE::Shift, 23}}, {19, {TE::Shift, 24}}, {20, {TE::Shift, 25}}, {21, {TE::Shift, 26}}, {22, {TE::Shift, 27}}, {23, {TE::Shift, 28}}, {27, {TE::Shift, 49}}},
    Row {{10, {TE::Reduce, 29}}, {13, {TE::Reduce, 29}}, {16, {TE::Reduce, 29}}, {17, {TE::Reduce, 29}}, {18, {TE::Reduce, 29}}, {19, {TE::Reduce, 29}}, {20, {TE::Reduce, 29}}, {21, {TE::Reduce, 29}}, {22, {TE::Reduce, 29}}, {23, {TE::Reduce, 29}}, {24, {TE::Reduce, 29}}, {25, {TE::Reduce, 29}}, {26, {TE::Reduce, 29}}, {27, {TE::Reduce, 29}}, {28, {TE::Reduce, 29}}, {29, {TE::Reduce, 29}}},
    Row {{14, {TE::Shift, 51}}},
    Row {{6, {TE::Transit, 52}}, {7, {TE::Transit, 10}}, {8, {TE::Transit, 11}}, {9, {TE::Transit, 12}}, {13, {TE::Shift, 30}}, {26, {TE::Shift, 13}}, {28, {TE::Shift, 14}}, {29, {TE::Shift, 15}}},
    Row {{10, {TE::Reduce, 10}}, {16, {TE::Shift, 21}}, {17, {TE::Shift, 22}}, {18, {TE::Shift, 23}}, {19, {TE::Shift, 24}}, {20, {TE::Shift, 25}}, {21, {TE::Shift, 26}}, {22, {TE::Shift, 27}}, {23, {TE::Shift, 28}}},
    Row {{6, {TE::Transit, 54}}, {7, {TE::Transit, 10}}, {8, {TE::Transit, 11}}, {9, {TE::Transit, 12}}, {13, {TE::Shift, 30}}, {26, {TE::Shift, 13}}, {28, {TE::Shift, 14}}, {29, {TE::Shift, 15}}},
    Row {{10, {TE::Reduce, 9}}, {16, {TE::Shift, 21}}, {17, {TE::Shift, 22}}, {18, {TE::Shift, 23}}, {19, {TE::Shift, 24}}, {20, {TE::Shift, 25}}, {21, {TE::Shift, 26}}, {22, {TE::Shift, 27}}, {23, {TE::Shift, 28}}},
    Row {{2, {TE::Transit, 17}}, {3, {TE::Transit, 7}}, {4, {TE::Transit, 5}}, {5, {TE::Transit, 4}}, {6, {TE::Transit, 6}}, {7, {TE::Transit, 10}}, {8, {TE::Transit, 11}}, {9, {TE::Transit, 12}}, {11, {TE::Shift, 16}}, {12, {TE::Shift, 56}}, {13, {TE::Shift, 9}}, {15, {TE::Shift, 8}}, {26, {TE::Shift, 13}}, {28, {TE::Shift, 14}}, {29, {TE::Shift, 15}}},
    Row {{11, {TE::Reduce, 8}}, {12, {TE::Reduce, 8}}, {13, {TE::Reduce, 8}}, {15, {TE::Reduce, 8}}, {26, {TE::Reduce, 8}}, {28, {TE::Reduce, 8}}, {29, {TE::Reduce, 8}}, {31, {TE::Reduce, 8}}}
};
// clang-format on

}  // namespace syntax

#endif