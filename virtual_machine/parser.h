/**
 * LR parser for C++ generated by the Syntax tool.
 *
 * https://www.npmjs.com/package/syntax-cli
 *
 *   npm install -g syntax-cli
 *
 *   syntax-cli --help
 *
 * To regenerate run:
 *
 *   syntax-cli \
 *     --grammar ~/path-to-grammar-file \
 *     --mode <parsing-mode> \
 *     --output ~/ParserClassName.h
 */
#ifndef __Syntax_LR_Parser_h
#define __Syntax_LR_Parser_h

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"

#include <assert.h>
#include <array>
#include <iostream>
#include <map>
#include <memory>
#include <regex>
#include <sstream>
#include <string>
#include <vector>

// ------------------------------------
// Module include prologue.
//
// Should include at least value/result type:
//
// type Value = <...>;
//
// Or struct Value { ... };
//
// Can also include parsing hooks:
//
//   void onParseBegin(const Parser& parser, const std::string& str) {
//     ...
//   }
//
//   void onParseBegin(const Parser& parser, const Value& result) {
//     ...
//   }
//
// clang-format off
#include <string>
#include <vector>
#include <memory>

enum class ExpType {
    NUMBER,
    STRING,
    SYMBOL,
    BINARY_EXP,
    UNARY_EXP,
    IF_EXP,
    WHILE_EXP,
    FOR_EXP,
    VAR_DECLARATION,
    BLOCK,
    ASSIGNMENT,
    FUNCTION_DECLARATION,
    FUNCTION_CALL,
    PARAM_LIST,
    ARG_LIST,
    RETURN_STATEMENT
};

struct Exp {
    ExpType type;

    int number;
    std::string string;

    std::string op;
    std::shared_ptr<Exp> left;
    std::shared_ptr<Exp> right;

    std::shared_ptr<Exp> condition;
    std::shared_ptr<Exp> thenBranch;
    std::shared_ptr<Exp> elseBranch;

    std::string varName;
    std::shared_ptr<Exp> varValue;

    std::vector<std::shared_ptr<Exp>> statements;

    std::string unaryOp;
    std::shared_ptr<Exp> operand;

    std::shared_ptr<Exp> whileBody;

    std::shared_ptr<Exp> forInit;
    std::shared_ptr<Exp> forCondition;
    std::shared_ptr<Exp> forUpdate;
    std::shared_ptr<Exp> forBody;

    std::string funcName;
    std::vector<std::string> funcParams;
    std::shared_ptr<Exp> funcBody;

    std::vector<std::shared_ptr<Exp>> callArguments;

    std::shared_ptr<Exp> returnValue;

    // Constructors

    Exp(ExpType type, const std::vector<std::string> &params)
        : type(type), funcParams(params) {}

    Exp(ExpType type, const std::vector<std::shared_ptr<Exp>> &args)
        : type(type), callArguments(args) {}

    Exp(ExpType type, const std::string &name, const std::vector<std::string> &params, std::shared_ptr<Exp> body)
        : type(type), funcName(name), funcParams(params), funcBody(body) {}

    Exp(ExpType type, const std::string &name, const std::vector<std::shared_ptr<Exp>> &args)
        : type(type), funcName(name), callArguments(args) {}

    Exp(int number) : type(ExpType::NUMBER), number(number) {}

    Exp(const std::string& strVal) {
        if (strVal[0] == '"') {
            type = ExpType::STRING;
            string = strVal.substr(1, strVal.size() - 2);
        } else {
            type = ExpType::SYMBOL;
            string = strVal;
        }
    }

    Exp(const std::string& unaryOp, std::shared_ptr<Exp> operand)
        : type(ExpType::UNARY_EXP), unaryOp(unaryOp), operand(operand) {}

    Exp(ExpType expType, const std::string& varName, std::shared_ptr<Exp> varValue)
        : type(expType), varName(varName), varValue(varValue) {}

    Exp(const std::string& op, std::shared_ptr<Exp> left, std::shared_ptr<Exp> right)
        : type(ExpType::BINARY_EXP), op(op), left(left), right(right) {}

    Exp(ExpType expType, std::shared_ptr<Exp> condition, std::shared_ptr<Exp> thenBranch, std::shared_ptr<Exp> elseBranch)
        : type(expType), condition(condition), thenBranch(thenBranch), elseBranch(elseBranch) {}

    Exp(const std::vector<std::shared_ptr<Exp>>& statements)
        : type(ExpType::BLOCK), statements(statements) {}

    Exp(ExpType expType, std::shared_ptr<Exp> condition, std::shared_ptr<Exp> whileBody)
        : type(expType), condition(condition), whileBody(whileBody) {}

    Exp(ExpType expType, std::shared_ptr<Exp> forInit, std::shared_ptr<Exp> forCondition, std::shared_ptr<Exp> forUpdate, std::shared_ptr<Exp> forBody)
        : type(expType), forInit(forInit), forCondition(forCondition), forUpdate(forUpdate), forBody(forBody) {}

    Exp(ExpType type, std::shared_ptr<Exp> returnValue)
        : type(type), returnValue(returnValue) {}
};

using Value = std::shared_ptr<Exp>;  // clang-format on

namespace syntax {

/**
 * Tokenizer class.
 */
// clang-format off
/**
 * Generic tokenizer used by the parser in the Syntax tool.
 *
 * https://www.npmjs.com/package/syntax-cli
 */

#ifndef __Syntax_Tokenizer_h
#define __Syntax_Tokenizer_h

class Tokenizer;

// ------------------------------------------------------------------
// TokenType.

enum class TokenType {
  __EMPTY = -1,
  // clang-format off
  IF = 31,
  L_PAREN = 32,
  R_PAREN = 33,
  ELSE = 34,
  WHILE = 35,
  FOR = 36,
  SEMICOLON = 37,
  FUNC = 38,
  SYMBOL = 39,
  L_BRACE = 40,
  R_BRACE = 41,
  VAR = 42,
  ASSIGN = 43,
  RETURN = 44,
  LOGICAL_OR = 45,
  LOGICAL_AND = 46,
  EQUALS = 47,
  NOT_EQUALS = 48,
  LESS = 49,
  GREATER = 50,
  LESS_EQUAL = 51,
  GREATER_EQUAL = 52,
  PLUS = 53,
  MINUS = 54,
  MULTIPLY = 55,
  DIVIDE = 56,
  LOGICAL_NOT = 57,
  NUMBER = 58,
  STRING = 59,
  TOKEN_TYPE_60 = 60,
  __EOF = 61
  // clang-format on
};

// ------------------------------------------------------------------
// Token.

struct Token {
  TokenType type;
  std::string value;

  int startOffset;
  int endOffset;
  int startLine;
  int endLine;
  int startColumn;
  int endColumn;
};

using SharedToken = std::shared_ptr<Token>;

typedef TokenType (*LexRuleHandler)(const Tokenizer&, const std::string&);

// ------------------------------------------------------------------
// Lex rule: [regex, handler]

struct LexRule {
  std::regex regex;
  LexRuleHandler handler;
};

// ------------------------------------------------------------------
// Token.

enum TokenizerState {
  // clang-format off
  INITIAL
  // clang-format on
};

// ------------------------------------------------------------------
// Tokenizer.

class Tokenizer {
 public:
  /**
   * Initializes a parsing string.
   */
  void initString(const std::string& str) {
    str_ = str;

    // Initialize states.
    states_.clear();
    states_.push_back(TokenizerState::INITIAL);

    cursor_ = 0;
    currentLine_ = 1;
    currentColumn_ = 0;
    currentLineBeginOffset_ = 0;

    tokenStartOffset_ = 0;
    tokenEndOffset_ = 0;
    tokenStartLine_ = 0;
    tokenEndLine_ = 0;
    tokenStartColumn_ = 0;
    tokenEndColumn_ = 0;
  }

  /**
   * Whether there are still tokens in the stream.
   */
  inline bool hasMoreTokens() { return cursor_ <= str_.length(); }

  /**
   * Returns current tokenizing state.
   */
  TokenizerState getCurrentState() { return states_.back(); }

  /**
   * Enters a new state pushing it on the states stack.
   */
  void pushState(TokenizerState state) { states_.push_back(state); }

  /**
   * Alias for `push_state`.
   */
  void begin(TokenizerState state) { states_.push_back(state); }

  /**
   * Exits a current state popping it from the states stack.
   */
  TokenizerState popState() {
    auto state = states_.back();
    states_.pop_back();
    return state;
  }

  /**
   * Returns next token.
   */
  SharedToken getNextToken() {
    if (!hasMoreTokens()) {
      yytext = __EOF;
      return toToken(TokenType::__EOF);
    }

    auto strSlice = str_.substr(cursor_);

    auto lexRulesForState = lexRulesByStartConditions_.at(getCurrentState());

    for (const auto& ruleIndex : lexRulesForState) {
      auto rule = lexRules_[ruleIndex];
      std::smatch sm;

      if (std::regex_search(strSlice, sm, rule.regex)) {
        yytext = sm[0];

        captureLocations_(yytext);
        cursor_ += yytext.length();

        // Manual handling of EOF token (the end of string). Return it
        // as `EOF` symbol.
        if (yytext.length() == 0) {
          cursor_++;
        }

        auto tokenType = rule.handler(*this, yytext);

        if (tokenType == TokenType::__EMPTY) {
          return getNextToken();
        }

        return toToken(tokenType);
      }
    }

    if (isEOF()) {
      cursor_++;
      yytext = __EOF;
      return toToken(TokenType::__EOF);
    }

    throwUnexpectedToken(std::string(1, strSlice[0]), currentLine_,
                         currentColumn_);
  }

  /**
   * Whether the cursor is at the EOF.
   */
  inline bool isEOF() { return cursor_ == str_.length(); }

  SharedToken toToken(TokenType tokenType) {
    return std::shared_ptr<Token>(new Token{
        .type = tokenType,
        .value = yytext,
        .startOffset = tokenStartOffset_,
        .endOffset = tokenEndOffset_,
        .startLine = tokenStartLine_,
        .endLine = tokenEndLine_,
        .startColumn = tokenStartColumn_,
        .endColumn = tokenEndColumn_,
    });
  }

  /**
   * Throws default "Unexpected token" exception, showing the actual
   * line from the source, pointing with the ^ marker to the bad token.
   * In addition, shows `line:column` location.
   */
  [[noreturn]] void throwUnexpectedToken(const std::string& symbol, int line,
                                         int column) {
    std::stringstream ss{str_};
    std::string lineStr;
    int currentLine = 1;

    while (currentLine++ <= line) {
      std::getline(ss, lineStr, '\n');
    }

    auto pad = std::string(column, ' ');

    std::stringstream errMsg;

    errMsg << "Syntax Error:\n\n"
           << lineStr << "\n"
           << pad << "^\nUnexpected token \"" << symbol << "\" at " << line
           << ":" << column << "\n\n";

    std::cerr << errMsg.str();
    throw new std::runtime_error(errMsg.str().c_str());
  }

  /**
   * Matched text.
   */
  std::string yytext;

 private:
  /**
   * Captures token locations.
   */
  void captureLocations_(const std::string& matched) {
    auto len = matched.length();

    // Absolute offsets.
    tokenStartOffset_ = cursor_;

    // Line-based locations, start.
    tokenStartLine_ = currentLine_;
    tokenStartColumn_ = tokenStartOffset_ - currentLineBeginOffset_;

    // Extract `\n` in the matched token.
    std::stringstream ss{matched};
    std::string lineStr;
    std::getline(ss, lineStr, '\n');
    while (ss.tellg() > 0 && ss.tellg() <= len) {
      currentLine_++;
      currentLineBeginOffset_ = tokenStartOffset_ + ss.tellg();
      std::getline(ss, lineStr, '\n');
    }

    tokenEndOffset_ = cursor_ + len;

    // Line-based locations, end.
    tokenEndLine_ = currentLine_;
    tokenEndColumn_ = tokenEndOffset_ - currentLineBeginOffset_;
    currentColumn_ = tokenEndColumn_;
  }

  /**
   * Lexical rules.
   */
  // clang-format off
  static constexpr size_t LEX_RULES_COUNT = 33;
  static std::array<LexRule, LEX_RULES_COUNT> lexRules_;
  static std::map<TokenizerState, std::vector<size_t>> lexRulesByStartConditions_;
  // clang-format on

  /**
   * Special EOF token.
   */
  static std::string __EOF;

  /**
   * Tokenizing string.
   */
  std::string str_;

  /**
   * Cursor for current symbol.
   */
  int cursor_;

  /**
   * States.
   */
  std::vector<TokenizerState> states_;

  /**
   * Line-based location tracking.
   */
  int currentLine_;
  int currentColumn_;
  int currentLineBeginOffset_;

  /**
   * Location data of a matched token.
   */
  int tokenStartOffset_;
  int tokenEndOffset_;
  int tokenStartLine_;
  int tokenEndLine_;
  int tokenStartColumn_;
  int tokenEndColumn_;
};

// ------------------------------------------------------------------
// Lexical rule handlers.

std::string Tokenizer::__EOF("$");

// clang-format off
inline TokenType _lexRule1(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::TOKEN_TYPE_60;
}

inline TokenType _lexRule2(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::__EMPTY;
}

inline TokenType _lexRule3(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::__EMPTY;
}

inline TokenType _lexRule4(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::__EMPTY;
}

inline TokenType _lexRule5(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::RETURN;
}

inline TokenType _lexRule6(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::FUNC;
}

inline TokenType _lexRule7(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::IF;
}

inline TokenType _lexRule8(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::WHILE;
}

inline TokenType _lexRule9(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::FOR;
}

inline TokenType _lexRule10(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::VAR;
}

inline TokenType _lexRule11(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::EQUALS;
}

inline TokenType _lexRule12(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::NOT_EQUALS;
}

inline TokenType _lexRule13(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::LESS_EQUAL;
}

inline TokenType _lexRule14(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::GREATER_EQUAL;
}

inline TokenType _lexRule15(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::LESS;
}

inline TokenType _lexRule16(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::GREATER;
}

inline TokenType _lexRule17(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::ASSIGN;
}

inline TokenType _lexRule18(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::SEMICOLON;
}

inline TokenType _lexRule19(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::L_PAREN;
}

inline TokenType _lexRule20(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::R_PAREN;
}

inline TokenType _lexRule21(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::L_BRACE;
}

inline TokenType _lexRule22(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::R_BRACE;
}

inline TokenType _lexRule23(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::ELSE;
}

inline TokenType _lexRule24(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::LOGICAL_AND;
}

inline TokenType _lexRule25(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::LOGICAL_OR;
}

inline TokenType _lexRule26(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::LOGICAL_NOT;
}

inline TokenType _lexRule27(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::PLUS;
}

inline TokenType _lexRule28(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::MINUS;
}

inline TokenType _lexRule29(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::MULTIPLY;
}

inline TokenType _lexRule30(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::DIVIDE;
}

inline TokenType _lexRule31(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::STRING;
}

inline TokenType _lexRule32(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::NUMBER;
}

inline TokenType _lexRule33(const Tokenizer& tokenizer, const std::string& yytext) {
return TokenType::SYMBOL;
}
// clang-format on

// ------------------------------------------------------------------
// Lexical rules.

// clang-format off
std::array<LexRule, Tokenizer::LEX_RULES_COUNT> Tokenizer::lexRules_ = {{
  {std::regex(R"(^,)"), &_lexRule1},
  {std::regex(R"(^\/\/.*)"), &_lexRule2},
  {std::regex(R"(^\/\*[\s\S]*?\*\/)"), &_lexRule3},
  {std::regex(R"(^\s+)"), &_lexRule4},
  {std::regex(R"(^return)"), &_lexRule5},
  {std::regex(R"(^func)"), &_lexRule6},
  {std::regex(R"(^if)"), &_lexRule7},
  {std::regex(R"(^while)"), &_lexRule8},
  {std::regex(R"(^for)"), &_lexRule9},
  {std::regex(R"(^var)"), &_lexRule10},
  {std::regex(R"(^==)"), &_lexRule11},
  {std::regex(R"(^!=)"), &_lexRule12},
  {std::regex(R"(^<=)"), &_lexRule13},
  {std::regex(R"(^>=)"), &_lexRule14},
  {std::regex(R"(^<)"), &_lexRule15},
  {std::regex(R"(^>)"), &_lexRule16},
  {std::regex(R"(^=)"), &_lexRule17},
  {std::regex(R"(^;)"), &_lexRule18},
  {std::regex(R"(^\()"), &_lexRule19},
  {std::regex(R"(^\))"), &_lexRule20},
  {std::regex(R"(^\{)"), &_lexRule21},
  {std::regex(R"(^\})"), &_lexRule22},
  {std::regex(R"(^else)"), &_lexRule23},
  {std::regex(R"(^&&)"), &_lexRule24},
  {std::regex(R"(^\|\|)"), &_lexRule25},
  {std::regex(R"(^!)"), &_lexRule26},
  {std::regex(R"(^\+)"), &_lexRule27},
  {std::regex(R"(^-)"), &_lexRule28},
  {std::regex(R"(^\*)"), &_lexRule29},
  {std::regex(R"(^\/)"), &_lexRule30},
  {std::regex(R"(^"[^\"]*")"), &_lexRule31},
  {std::regex(R"(^\d+)"), &_lexRule32},
  {std::regex(R"(^[\w]+)"), &_lexRule33}
}};
std::map<TokenizerState, std::vector<size_t>> Tokenizer::lexRulesByStartConditions_ =  {{TokenizerState::INITIAL, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32}}};
// clang-format on

#endif
// clang-format on

#define POP_V()              \
  parser.valuesStack.back(); \
  parser.valuesStack.pop_back()

#define POP_T()              \
  parser.tokensStack.back(); \
  parser.tokensStack.pop_back()

#define PUSH_VR() parser.valuesStack.push_back(__)
#define PUSH_TR() parser.tokensStack.push_back(__)

/**
 * Parsing table type.
 */
enum class TE {
  Accept,
  Shift,
  Reduce,
  Transit,
};

/**
 * Parsing table entry.
 */
struct TableEntry {
  TE type;
  int value;
};

// clang-format off
class parser;
// clang-format on

using yyparse = parser;

typedef void (*ProductionHandler)(yyparse&);

/**
 * Encoded production.
 *
 * opcode - encoded index
 * rhsLength - length of the RHS to pop.
 */
struct Production {
  int opcode;
  int rhsLength;
  ProductionHandler handler;
};

// Key: Encoded symbol (terminal or non-terminal) index
// Value: TableEntry
using Row = std::map<int, TableEntry>;

/**
 * Parser class.
 */
// clang-format off
class parser {
  // clang-format on
 public:
  /**
   * Parsing values stack.
   */
  std::vector<Value> valuesStack;

  /**
   * Token values stack.
   */
  std::vector<std::string> tokensStack;

  /**
   * Parsing states stack.
   */
  std::vector<int> statesStack;

  /**
   * Tokenizer.
   */
  Tokenizer tokenizer;

  /**
   * Previous state to calculate the next one.
   */
  int previousState;

  /**
   * Parses a string.
   */
  Value parse(const std::string& str) {
    // clang-format off
    
    // clang-format on

    // Initialize the tokenizer and the string.
    tokenizer.initString(str);

    // Initialize the stacks.
    valuesStack.clear();
    tokensStack.clear();
    statesStack.clear();

    // Initial 0 state.
    statesStack.push_back(0);

    auto token = tokenizer.getNextToken();
    auto shiftedToken = token;

    // Main parsing loop.
    for (;;) {
      auto state = statesStack.back();
      auto column = (int)token->type;

      if (table_[state].count(column) == 0) {
        throwUnexpectedToken(token);
      }

      auto entry = table_[state].at(column);

      // Shift a token, go to state.
      if (entry.type == TE::Shift) {
        // Push token.
        tokensStack.push_back(token->value);

        // Push next state number: "s5" -> 5
        statesStack.push_back(entry.value);

        shiftedToken = token;
        token = tokenizer.getNextToken();
      }

      // Reduce by production.
      else if (entry.type == TE::Reduce) {
        auto productionNumber = entry.value;
        auto production = productions_[productionNumber];

        tokenizer.yytext = shiftedToken->value;

        auto rhsLength = production.rhsLength;
        while (rhsLength > 0) {
          statesStack.pop_back();
          rhsLength--;
        }

        // Call the handler.
        production.handler(*this);

        auto previousState = statesStack.back();

        auto symbolToReduceWith = production.opcode;
        auto nextStateEntry = table_[previousState].at(symbolToReduceWith);
        assert(nextStateEntry.type == TE::Transit);

        statesStack.push_back(nextStateEntry.value);
      }

      // Accept the string.
      else if (entry.type == TE::Accept) {
        // Pop state number.
        statesStack.pop_back();

        // Pop the parsed value.
        // clang-format off
        auto result = valuesStack.back(); valuesStack.pop_back();
        // clang-format on

        if (statesStack.size() != 1 || statesStack.back() != 0 ||
            tokenizer.hasMoreTokens()) {
          throwUnexpectedToken(token);
        }

        statesStack.pop_back();

        // clang-format off
        
        // clang-format on

        return result;
      }
    }
  }

 private:
  /**
   * Throws parser error on unexpected token.
   */
  [[noreturn]] void throwUnexpectedToken(SharedToken token) {
    if (token->type == TokenType::__EOF && !tokenizer.hasMoreTokens()) {
      std::string errMsg = "Unexpected end of input.\n";
      std::cerr << errMsg;
      throw std::runtime_error(errMsg.c_str());
    }
    tokenizer.throwUnexpectedToken(token->value, token->startLine,
                                   token->startColumn);
  }

  // clang-format off
  static constexpr size_t PRODUCTIONS_COUNT = 67;
  static std::array<Production, PRODUCTIONS_COUNT> productions_;

  static constexpr size_t ROWS_COUNT = 121;
  static std::array<Row, ROWS_COUNT> table_;
  // clang-format on
};

// ------------------------------------------------------------------
// Productions.

// clang-format off
void _handler1(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_V();

auto __ = _1;

 // Semantic action epilogue.
PUSH_VR();

}

void _handler2(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_V();

auto __ = _1;

 // Semantic action epilogue.
PUSH_VR();

}

void _handler3(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_V();

auto __ = std::make_shared<Exp>(std::vector<std::shared_ptr<Exp>>{ _1 });

 // Semantic action epilogue.
PUSH_VR();

}

void _handler4(yyparse& parser) {
// Semantic action prologue.
auto _2 = POP_V();
auto _1 = POP_V();

_1->statements.push_back(_2); auto __ = _1;

 // Semantic action epilogue.
PUSH_VR();

}

void _handler5(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_V();

auto __ = _1;

 // Semantic action epilogue.
PUSH_VR();

}

void _handler6(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_V();

auto __ = _1;

 // Semantic action epilogue.
PUSH_VR();

}

void _handler7(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_V();

auto __ = _1;

 // Semantic action epilogue.
PUSH_VR();

}

void _handler8(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_V();

auto __ = _1;

 // Semantic action epilogue.
PUSH_VR();

}

void _handler9(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_V();

auto __ = _1;

 // Semantic action epilogue.
PUSH_VR();

}

void _handler10(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_V();

auto __ = _1;

 // Semantic action epilogue.
PUSH_VR();

}

void _handler11(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_V();

auto __ = _1;

 // Semantic action epilogue.
PUSH_VR();

}

void _handler12(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_V();

auto __ = _1;

 // Semantic action epilogue.
PUSH_VR();

}

void _handler13(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_V();

auto __ = _1;

 // Semantic action epilogue.
PUSH_VR();

}

void _handler14(yyparse& parser) {
// Semantic action prologue.
auto _7 = POP_V();
parser.tokensStack.pop_back();
auto _5 = POP_V();
parser.tokensStack.pop_back();
auto _3 = POP_V();
parser.tokensStack.pop_back();
parser.tokensStack.pop_back();

auto __ = std::make_shared<Exp>(ExpType::IF_EXP, _3, _5, _7);

 // Semantic action epilogue.
PUSH_VR();

}

void _handler15(yyparse& parser) {
// Semantic action prologue.
auto _5 = POP_V();
parser.tokensStack.pop_back();
auto _3 = POP_V();
parser.tokensStack.pop_back();
parser.tokensStack.pop_back();

auto __ = std::make_shared<Exp>(ExpType::IF_EXP, _3, _5, nullptr);

 // Semantic action epilogue.
PUSH_VR();

}

void _handler16(yyparse& parser) {
// Semantic action prologue.
auto _5 = POP_V();
parser.tokensStack.pop_back();
auto _3 = POP_V();
parser.tokensStack.pop_back();
parser.tokensStack.pop_back();

auto __ = std::make_shared<Exp>(ExpType::WHILE_EXP, _3, _5);

 // Semantic action epilogue.
PUSH_VR();

}

void _handler17(yyparse& parser) {
// Semantic action prologue.
auto _9 = POP_V();
parser.tokensStack.pop_back();
auto _7 = POP_V();
parser.tokensStack.pop_back();
auto _5 = POP_V();
parser.tokensStack.pop_back();
auto _3 = POP_V();
parser.tokensStack.pop_back();
parser.tokensStack.pop_back();

auto __ = std::make_shared<Exp>(ExpType::FOR_EXP, _3, _5, _7, _9);

 // Semantic action epilogue.
PUSH_VR();

}

void _handler18(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_V();

auto __ = _1;

 // Semantic action epilogue.
PUSH_VR();

}

void _handler19(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_V();

auto __ = _1;

 // Semantic action epilogue.
PUSH_VR();

}

void _handler20(yyparse& parser) {
// Semantic action prologue.


auto __ = nullptr;

 // Semantic action epilogue.
PUSH_VR();

}

void _handler21(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_V();

auto __ = _1;

 // Semantic action epilogue.
PUSH_VR();

}

void _handler22(yyparse& parser) {
// Semantic action prologue.


auto __ = nullptr;

 // Semantic action epilogue.
PUSH_VR();

}

void _handler23(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_V();

auto __ = _1;

 // Semantic action epilogue.
PUSH_VR();

}

void _handler24(yyparse& parser) {
// Semantic action prologue.


auto __ = nullptr;

 // Semantic action epilogue.
PUSH_VR();

}

void _handler25(yyparse& parser) {
// Semantic action prologue.
parser.tokensStack.pop_back();
auto _1 = POP_V();

auto __ = _1;

 // Semantic action epilogue.
PUSH_VR();

}

void _handler26(yyparse& parser) {
// Semantic action prologue.
parser.tokensStack.pop_back();
auto _1 = POP_V();

auto __ = _1;

 // Semantic action epilogue.
PUSH_VR();

}

void _handler27(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_V();

auto __ = _1;

 // Semantic action epilogue.
PUSH_VR();

}

void _handler28(yyparse& parser) {
// Semantic action prologue.
auto _6 = POP_V();
parser.tokensStack.pop_back();
auto _4 = POP_V();
parser.tokensStack.pop_back();
auto _2 = POP_T();
parser.tokensStack.pop_back();

auto __ = std::make_shared<Exp>(
             ExpType::FUNCTION_DECLARATION,
             _2,
             _4->funcParams,
             _6
          );

 // Semantic action epilogue.
PUSH_VR();

}

void _handler29(yyparse& parser) {
// Semantic action prologue.
parser.tokensStack.pop_back();
auto _2 = POP_V();
parser.tokensStack.pop_back();

auto __ = std::make_shared<Exp>(_2->statements);

 // Semantic action epilogue.
PUSH_VR();

}

void _handler30(yyparse& parser) {
// Semantic action prologue.
auto _4 = POP_V();
parser.tokensStack.pop_back();
auto _2 = POP_T();
parser.tokensStack.pop_back();

auto __ = std::make_shared<Exp>(ExpType::VAR_DECLARATION, _2, _4);

 // Semantic action epilogue.
PUSH_VR();

}

void _handler31(yyparse& parser) {
// Semantic action prologue.
parser.tokensStack.pop_back();
auto _2 = POP_V();
parser.tokensStack.pop_back();

auto __ = std::make_shared<Exp>(ExpType::RETURN_STATEMENT, _2);

 // Semantic action epilogue.
PUSH_VR();

}

void _handler32(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_V();

auto __ = _1;

 // Semantic action epilogue.
PUSH_VR();

}

void _handler33(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_V();

auto __ = _1;

 // Semantic action epilogue.
PUSH_VR();

}

void _handler34(yyparse& parser) {
// Semantic action prologue.
auto _3 = POP_V();
parser.tokensStack.pop_back();
auto _1 = POP_T();

auto __ = std::make_shared<Exp>(ExpType::ASSIGNMENT, _1, _3);

 // Semantic action epilogue.
PUSH_VR();

}

void _handler35(yyparse& parser) {
// Semantic action prologue.
auto _3 = POP_V();
parser.tokensStack.pop_back();
auto _1 = POP_V();

auto __ = std::make_shared<Exp>("||", _1, _3);

 // Semantic action epilogue.
PUSH_VR();

}

void _handler36(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_V();

auto __ = _1;

 // Semantic action epilogue.
PUSH_VR();

}

void _handler37(yyparse& parser) {
// Semantic action prologue.
auto _3 = POP_V();
parser.tokensStack.pop_back();
auto _1 = POP_V();

auto __ = std::make_shared<Exp>("&&", _1, _3);

 // Semantic action epilogue.
PUSH_VR();

}

void _handler38(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_V();

auto __ = _1;

 // Semantic action epilogue.
PUSH_VR();

}

void _handler39(yyparse& parser) {
// Semantic action prologue.
auto _3 = POP_V();
parser.tokensStack.pop_back();
auto _1 = POP_V();

auto __ = std::make_shared<Exp>("==", _1, _3);

 // Semantic action epilogue.
PUSH_VR();

}

void _handler40(yyparse& parser) {
// Semantic action prologue.
auto _3 = POP_V();
parser.tokensStack.pop_back();
auto _1 = POP_V();

auto __ = std::make_shared<Exp>("!=", _1, _3);

 // Semantic action epilogue.
PUSH_VR();

}

void _handler41(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_V();

auto __ = _1;

 // Semantic action epilogue.
PUSH_VR();

}

void _handler42(yyparse& parser) {
// Semantic action prologue.
auto _3 = POP_V();
parser.tokensStack.pop_back();
auto _1 = POP_V();

auto __ = std::make_shared<Exp>("<", _1, _3);

 // Semantic action epilogue.
PUSH_VR();

}

void _handler43(yyparse& parser) {
// Semantic action prologue.
auto _3 = POP_V();
parser.tokensStack.pop_back();
auto _1 = POP_V();

auto __ = std::make_shared<Exp>(">", _1, _3);

 // Semantic action epilogue.
PUSH_VR();

}

void _handler44(yyparse& parser) {
// Semantic action prologue.
auto _3 = POP_V();
parser.tokensStack.pop_back();
auto _1 = POP_V();

auto __ = std::make_shared<Exp>("<=", _1, _3);

 // Semantic action epilogue.
PUSH_VR();

}

void _handler45(yyparse& parser) {
// Semantic action prologue.
auto _3 = POP_V();
parser.tokensStack.pop_back();
auto _1 = POP_V();

auto __ = std::make_shared<Exp>(">=", _1, _3);

 // Semantic action epilogue.
PUSH_VR();

}

void _handler46(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_V();

auto __ = _1;

 // Semantic action epilogue.
PUSH_VR();

}

void _handler47(yyparse& parser) {
// Semantic action prologue.
auto _3 = POP_V();
parser.tokensStack.pop_back();
auto _1 = POP_V();

auto __ = std::make_shared<Exp>("+", _1, _3);

 // Semantic action epilogue.
PUSH_VR();

}

void _handler48(yyparse& parser) {
// Semantic action prologue.
auto _3 = POP_V();
parser.tokensStack.pop_back();
auto _1 = POP_V();

auto __ = std::make_shared<Exp>("-", _1, _3);

 // Semantic action epilogue.
PUSH_VR();

}

void _handler49(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_V();

auto __ = _1;

 // Semantic action epilogue.
PUSH_VR();

}

void _handler50(yyparse& parser) {
// Semantic action prologue.
auto _3 = POP_V();
parser.tokensStack.pop_back();
auto _1 = POP_V();

auto __ = std::make_shared<Exp>("*", _1, _3);

 // Semantic action epilogue.
PUSH_VR();

}

void _handler51(yyparse& parser) {
// Semantic action prologue.
auto _3 = POP_V();
parser.tokensStack.pop_back();
auto _1 = POP_V();

auto __ = std::make_shared<Exp>("/", _1, _3);

 // Semantic action epilogue.
PUSH_VR();

}

void _handler52(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_V();

auto __ = _1;

 // Semantic action epilogue.
PUSH_VR();

}

void _handler53(yyparse& parser) {
// Semantic action prologue.
auto _2 = POP_V();
parser.tokensStack.pop_back();

auto __ = std::make_shared<Exp>("!", _2);

 // Semantic action epilogue.
PUSH_VR();

}

void _handler54(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_V();

auto __ = _1;

 // Semantic action epilogue.
PUSH_VR();

}

void _handler55(yyparse& parser) {
// Semantic action prologue.
parser.tokensStack.pop_back();
auto _2 = POP_V();
parser.tokensStack.pop_back();

auto __ = _2;

 // Semantic action epilogue.
PUSH_VR();

}

void _handler56(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_T();

auto __ = std::make_shared<Exp>(std::stoi(_1));

 // Semantic action epilogue.
PUSH_VR();

}

void _handler57(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_T();

auto __ = std::make_shared<Exp>(_1);

 // Semantic action epilogue.
PUSH_VR();

}

void _handler58(yyparse& parser) {
// Semantic action prologue.
parser.tokensStack.pop_back();
auto _3 = POP_V();
parser.tokensStack.pop_back();
auto _1 = POP_T();

auto __ = std::make_shared<Exp>(
                 ExpType::FUNCTION_CALL,
                 _1,
                 _3->callArguments
               );

 // Semantic action epilogue.
PUSH_VR();

}

void _handler59(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_T();

auto __ = std::make_shared<Exp>(_1);

 // Semantic action epilogue.
PUSH_VR();

}

void _handler60(yyparse& parser) {
// Semantic action prologue.


auto __ = std::make_shared<Exp>(ExpType::PARAM_LIST, std::vector<std::string>());

 // Semantic action epilogue.
PUSH_VR();

}

void _handler61(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_V();

auto __ = _1;

 // Semantic action epilogue.
PUSH_VR();

}

void _handler62(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_T();

std::vector<std::string> params = {_1};
          auto __ = std::make_shared<Exp>(ExpType::PARAM_LIST, params);

 // Semantic action epilogue.
PUSH_VR();

}

void _handler63(yyparse& parser) {
// Semantic action prologue.
auto _3 = POP_T();
parser.tokensStack.pop_back();
auto _1 = POP_V();

_1->funcParams.push_back(_3);
          auto __ = _1;

 // Semantic action epilogue.
PUSH_VR();

}

void _handler64(yyparse& parser) {
// Semantic action prologue.


auto __ = std::make_shared<Exp>(ExpType::ARG_LIST, std::vector<std::shared_ptr<Exp>>());

 // Semantic action epilogue.
PUSH_VR();

}

void _handler65(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_V();

auto __ = _1;

 // Semantic action epilogue.
PUSH_VR();

}

void _handler66(yyparse& parser) {
// Semantic action prologue.
auto _1 = POP_V();

std::vector<std::shared_ptr<Exp>> args = {_1};
          auto __ = std::make_shared<Exp>(ExpType::ARG_LIST, args);

 // Semantic action epilogue.
PUSH_VR();

}

void _handler67(yyparse& parser) {
// Semantic action prologue.
auto _3 = POP_V();
parser.tokensStack.pop_back();
auto _1 = POP_V();

_1->callArguments.push_back(_3);
          auto __ = _1;

 // Semantic action epilogue.
PUSH_VR();

}
// clang-format on

// clang-format off
std::array<Production, yyparse::PRODUCTIONS_COUNT> yyparse::productions_ = {{{-1, 1, &_handler1},
{0, 1, &_handler2},
{1, 1, &_handler3},
{1, 2, &_handler4},
{2, 1, &_handler5},
{2, 1, &_handler6},
{2, 1, &_handler7},
{3, 1, &_handler8},
{3, 1, &_handler9},
{3, 1, &_handler10},
{3, 1, &_handler11},
{3, 1, &_handler12},
{4, 1, &_handler13},
{5, 7, &_handler14},
{6, 5, &_handler15},
{7, 5, &_handler16},
{8, 9, &_handler17},
{9, 1, &_handler18},
{9, 1, &_handler19},
{9, 0, &_handler20},
{10, 1, &_handler21},
{10, 0, &_handler22},
{11, 1, &_handler23},
{11, 0, &_handler24},
{12, 2, &_handler25},
{12, 2, &_handler26},
{12, 1, &_handler27},
{13, 6, &_handler28},
{14, 3, &_handler29},
{15, 4, &_handler30},
{16, 3, &_handler31},
{17, 1, &_handler32},
{17, 1, &_handler33},
{18, 3, &_handler34},
{19, 3, &_handler35},
{19, 1, &_handler36},
{20, 3, &_handler37},
{20, 1, &_handler38},
{21, 3, &_handler39},
{21, 3, &_handler40},
{21, 1, &_handler41},
{22, 3, &_handler42},
{22, 3, &_handler43},
{22, 3, &_handler44},
{22, 3, &_handler45},
{22, 1, &_handler46},
{23, 3, &_handler47},
{23, 3, &_handler48},
{23, 1, &_handler49},
{24, 3, &_handler50},
{24, 3, &_handler51},
{24, 1, &_handler52},
{25, 2, &_handler53},
{25, 1, &_handler54},
{26, 3, &_handler55},
{26, 1, &_handler56},
{26, 1, &_handler57},
{26, 4, &_handler58},
{26, 1, &_handler59},
{27, 0, &_handler60},
{27, 1, &_handler61},
{28, 1, &_handler62},
{28, 3, &_handler63},
{29, 0, &_handler64},
{29, 1, &_handler65},
{30, 1, &_handler66},
{30, 3, &_handler67}}};
// clang-format on

// ------------------------------------------------------------------
// Parsing table.

// clang-format off
std::array<Row, yyparse::ROWS_COUNT> yyparse::table_ = {
    Row {{0, {TE::Transit, 1}}, {1, {TE::Transit, 2}}, {2, {TE::Transit, 3}}, {3, {TE::Transit, 4}}, {4, {TE::Transit, 5}}, {5, {TE::Transit, 7}}, {6, {TE::Transit, 35}}, {7, {TE::Transit, 8}}, {8, {TE::Transit, 9}}, {12, {TE::Transit, 11}}, {13, {TE::Transit, 10}}, {14, {TE::Transit, 18}}, {15, {TE::Transit, 16}}, {16, {TE::Transit, 6}}, {17, {TE::Transit, 17}}, {18, {TE::Transit, 20}}, {19, {TE::Transit, 21}}, {20, {TE::Transit, 23}}, {21, {TE::Transit, 24}}, {22, {TE::Transit, 25}}, {23, {TE::Transit, 26}}, {24, {TE::Transit, 27}}, {25, {TE::Transit, 28}}, {26, {TE::Transit, 30}}, {31, {TE::Shift, 12}}, {32, {TE::Shift, 31}}, {35, {TE::Shift, 13}}, {36, {TE::Shift, 14}}, {38, {TE::Shift, 15}}, {39, {TE::Shift, 22}}, {40, {TE::Shift, 34}}, {42, {TE::Shift, 19}}, {44, {TE::Shift, 36}}, {57, {TE::Shift, 29}}, {58, {TE::Shift, 32}}, {59, {TE::Shift, 33}}},
    Row {{61, {TE::Accept, 0}}},
    Row {{2, {TE::Transit, 37}}, {3, {TE::Transit, 4}}, {4, {TE::Transit, 5}}, {5, {TE::Transit, 7}}, {6, {TE::Transit, 35}}, {7, {TE::Transit, 8}}, {8, {TE::Transit, 9}}, {12, {TE::Transit, 11}}, {13, {TE::Transit, 10}}, {14, {TE::Transit, 18}}, {15, {TE::Transit, 16}}, {16, {TE::Transit, 6}}, {17, {TE::Transit, 17}}, {18, {TE::Transit, 20}}, {19, {TE::Transit, 21}}, {20, {TE::Transit, 23}}, {21, {TE::Transit, 24}}, {22, {TE::Transit, 25}}, {23, {TE::Transit, 26}}, {24, {TE::Transit, 27}}, {25, {TE::Transit, 28}}, {26, {TE::Transit, 30}}, {31, {TE::Shift, 12}}, {32, {TE::Shift, 31}}, {35, {TE::Shift, 13}}, {36, {TE::Shift, 14}}, {38, {TE::Shift, 15}}, {39, {TE::Shift, 22}}, {40, {TE::Shift, 34}}, {42, {TE::Shift, 19}}, {44, {TE::Shift, 36}}, {57, {TE::Shift, 29}}, {58, {TE::Shift, 32}}, {59, {TE::Shift, 33}}, {61, {TE::Reduce, 1}}},
    Row {{31, {TE::Reduce, 2}}, {32, {TE::Reduce, 2}}, {35, {TE::Reduce, 2}}, {36, {TE::Reduce, 2}}, {38, {TE::Reduce, 2}}, {39, {TE::Reduce, 2}}, {40, {TE::Reduce, 2}}, {41, {TE::Reduce, 2}}, {42, {TE::Reduce, 2}}, {44, {TE::Reduce, 2}}, {57, {TE::Reduce, 2}}, {58, {TE::Reduce, 2}}, {59, {TE::Reduce, 2}}, {61, {TE::Reduce, 2}}},
    Row {{31, {TE::Reduce, 4}}, {32, {TE::Reduce, 4}}, {35, {TE::Reduce, 4}}, {36, {TE::Reduce, 4}}, {38, {TE::Reduce, 4}}, {39, {TE::Reduce, 4}}, {40, {TE::Reduce, 4}}, {41, {TE::Reduce, 4}}, {42, {TE::Reduce, 4}}, {44, {TE::Reduce, 4}}, {57, {TE::Reduce, 4}}, {58, {TE::Reduce, 4}}, {59, {TE::Reduce, 4}}, {61, {TE::Reduce, 4}}},
    Row {{31, {TE::Reduce, 5}}, {32, {TE::Reduce, 5}}, {35, {TE::Reduce, 5}}, {36, {TE::Reduce, 5}}, {38, {TE::Reduce, 5}}, {39, {TE::Reduce, 5}}, {40, {TE::Reduce, 5}}, {41, {TE::Reduce, 5}}, {42, {TE::Reduce, 5}}, {44, {TE::Reduce, 5}}, {57, {TE::Reduce, 5}}, {58, {TE::Reduce, 5}}, {59, {TE::Reduce, 5}}, {61, {TE::Reduce, 5}}},
    Row {{31, {TE::Reduce, 6}}, {32, {TE::Reduce, 6}}, {35, {TE::Reduce, 6}}, {36, {TE::Reduce, 6}}, {38, {TE::Reduce, 6}}, {39, {TE::Reduce, 6}}, {40, {TE::Reduce, 6}}, {41, {TE::Reduce, 6}}, {42, {TE::Reduce, 6}}, {44, {TE::Reduce, 6}}, {57, {TE::Reduce, 6}}, {58, {TE::Reduce, 6}}, {59, {TE::Reduce, 6}}, {61, {TE::Reduce, 6}}},
    Row {{31, {TE::Reduce, 7}}, {32, {TE::Reduce, 7}}, {34, {TE::Reduce, 7}}, {35, {TE::Reduce, 7}}, {36, {TE::Reduce, 7}}, {38, {TE::Reduce, 7}}, {39, {TE::Reduce, 7}}, {40, {TE::Reduce, 7}}, {41, {TE::Reduce, 7}}, {42, {TE::Reduce, 7}}, {44, {TE::Reduce, 7}}, {57, {TE::Reduce, 7}}, {58, {TE::Reduce, 7}}, {59, {TE::Reduce, 7}}, {61, {TE::Reduce, 7}}},
    Row {{31, {TE::Reduce, 8}}, {32, {TE::Reduce, 8}}, {34, {TE::Reduce, 8}}, {35, {TE::Reduce, 8}}, {36, {TE::Reduce, 8}}, {38, {TE::Reduce, 8}}, {39, {TE::Reduce, 8}}, {40, {TE::Reduce, 8}}, {41, {TE::Reduce, 8}}, {42, {TE::Reduce, 8}}, {44, {TE::Reduce, 8}}, {57, {TE::Reduce, 8}}, {58, {TE::Reduce, 8}}, {59, {TE::Reduce, 8}}, {61, {TE::Reduce, 8}}},
    Row {{31, {TE::Reduce, 9}}, {32, {TE::Reduce, 9}}, {34, {TE::Reduce, 9}}, {35, {TE::Reduce, 9}}, {36, {TE::Reduce, 9}}, {38, {TE::Reduce, 9}}, {39, {TE::Reduce, 9}}, {40, {TE::Reduce, 9}}, {41, {TE::Reduce, 9}}, {42, {TE::Reduce, 9}}, {44, {TE::Reduce, 9}}, {57, {TE::Reduce, 9}}, {58, {TE::Reduce, 9}}, {59, {TE::Reduce, 9}}, {61, {TE::Reduce, 9}}},
    Row {{31, {TE::Reduce, 10}}, {32, {TE::Reduce, 10}}, {34, {TE::Reduce, 10}}, {35, {TE::Reduce, 10}}, {36, {TE::Reduce, 10}}, {38, {TE::Reduce, 10}}, {39, {TE::Reduce, 10}}, {40, {TE::Reduce, 10}}, {41, {TE::Reduce, 10}}, {42, {TE::Reduce, 10}}, {44, {TE::Reduce, 10}}, {57, {TE::Reduce, 10}}, {58, {TE::Reduce, 10}}, {59, {TE::Reduce, 10}}, {61, {TE::Reduce, 10}}},
    Row {{31, {TE::Reduce, 11}}, {32, {TE::Reduce, 11}}, {34, {TE::Reduce, 11}}, {35, {TE::Reduce, 11}}, {36, {TE::Reduce, 11}}, {38, {TE::Reduce, 11}}, {39, {TE::Reduce, 11}}, {40, {TE::Reduce, 11}}, {41, {TE::Reduce, 11}}, {42, {TE::Reduce, 11}}, {44, {TE::Reduce, 11}}, {57, {TE::Reduce, 11}}, {58, {TE::Reduce, 11}}, {59, {TE::Reduce, 11}}, {61, {TE::Reduce, 11}}},
    Row {{32, {TE::Shift, 38}}},
    Row {{32, {TE::Shift, 50}}},
    Row {{32, {TE::Shift, 54}}},
    Row {{39, {TE::Shift, 66}}},
    Row {{37, {TE::Shift, 75}}},
    Row {{37, {TE::Shift, 76}}},
    Row {{31, {TE::Reduce, 26}}, {32, {TE::Reduce, 26}}, {34, {TE::Reduce, 26}}, {35, {TE::Reduce, 26}}, {36, {TE::Reduce, 26}}, {38, {TE::Reduce, 26}}, {39, {TE::Reduce, 26}}, {40, {TE::Reduce, 26}}, {41, {TE::Reduce, 26}}, {42, {TE::Reduce, 26}}, {44, {TE::Reduce, 26}}, {57, {TE::Reduce, 26}}, {58, {TE::Reduce, 26}}, {59, {TE::Reduce, 26}}, {61, {TE::Reduce, 26}}},
    Row {{39, {TE::Shift, 77}}},
    Row {{33, {TE::Reduce, 31}}, {37, {TE::Reduce, 31}}, {60, {TE::Reduce, 31}}},
    Row {{33, {TE::Reduce, 32}}, {37, {TE::Reduce, 32}}, {45, {TE::Shift, 80}}, {60, {TE::Reduce, 32}}},
    Row {{32, {TE::Shift, 103}}, {33, {TE::Reduce, 58}}, {37, {TE::Reduce, 58}}, {43, {TE::Shift, 102}}, {45, {TE::Reduce, 58}}, {46, {TE::Reduce, 58}}, {47, {TE::Reduce, 58}}, {48, {TE::Reduce, 58}}, {49, {TE::Reduce, 58}}, {50, {TE::Reduce, 58}}, {51, {TE::Reduce, 58}}, {52, {TE::Reduce, 58}}, {53, {TE::Reduce, 58}}, {54, {TE::Reduce, 58}}, {55, {TE::Reduce, 58}}, {56, {TE::Reduce, 58}}, {60, {TE::Reduce, 58}}},
    Row {{33, {TE::Reduce, 35}}, {37, {TE::Reduce, 35}}, {45, {TE::Reduce, 35}}, {46, {TE::Shift, 83}}, {60, {TE::Reduce, 35}}},
    Row {{33, {TE::Reduce, 37}}, {37, {TE::Reduce, 37}}, {45, {TE::Reduce, 37}}, {46, {TE::Reduce, 37}}, {47, {TE::Shift, 85}}, {48, {TE::Shift, 86}}, {60, {TE::Reduce, 37}}},
    Row {{33, {TE::Reduce, 40}}, {37, {TE::Reduce, 40}}, {45, {TE::Reduce, 40}}, {46, {TE::Reduce, 40}}, {47, {TE::Reduce, 40}}, {48, {TE::Reduce, 40}}, {49, {TE::Shift, 88}}, {50, {TE::Shift, 89}}, {51, {TE::Shift, 90}}, {52, {TE::Shift, 91}}, {60, {TE::Reduce, 40}}},
    Row {{33, {TE::Reduce, 45}}, {37, {TE::Reduce, 45}}, {45, {TE::Reduce, 45}}, {46, {TE::Reduce, 45}}, {47, {TE::Reduce, 45}}, {48, {TE::Reduce, 45}}, {49, {TE::Reduce, 45}}, {50, {TE::Reduce, 45}}, {51, {TE::Reduce, 45}}, {52, {TE::Reduce, 45}}, {53, {TE::Shift, 93}}, {54, {TE::Shift, 94}}, {60, {TE::Reduce, 45}}},
    Row {{33, {TE::Reduce, 48}}, {37, {TE::Reduce, 48}}, {45, {TE::Reduce, 48}}, {46, {TE::Reduce, 48}}, {47, {TE::Reduce, 48}}, {48, {TE::Reduce, 48}}, {49, {TE::Reduce, 48}}, {50, {TE::Reduce, 48}}, {51, {TE::Reduce, 48}}, {52, {TE::Reduce, 48}}, {53, {TE::Reduce, 48}}, {54, {TE::Reduce, 48}}, {55, {TE::Shift, 96}}, {56, {TE::Shift, 97}}, {60, {TE::Reduce, 48}}},
    Row {{33, {TE::Reduce, 51}}, {37, {TE::Reduce, 51}}, {45, {TE::Reduce, 51}}, {46, {TE::Reduce, 51}}, {47, {TE::Reduce, 51}}, {48, {TE::Reduce, 51}}, {49, {TE::Reduce, 51}}, {50, {TE::Reduce, 51}}, {51, {TE::Reduce, 51}}, {52, {TE::Reduce, 51}}, {53, {TE::Reduce, 51}}, {54, {TE::Reduce, 51}}, {55, {TE::Reduce, 51}}, {56, {TE::Reduce, 51}}, {60, {TE::Reduce, 51}}},
    Row {{25, {TE::Transit, 99}}, {26, {TE::Transit, 30}}, {32, {TE::Shift, 31}}, {39, {TE::Shift, 82}}, {57, {TE::Shift, 29}}, {58, {TE::Shift, 32}}, {59, {TE::Shift, 33}}},
    Row {{33, {TE::Reduce, 53}}, {37, {TE::Reduce, 53}}, {45, {TE::Reduce, 53}}, {46, {TE::Reduce, 53}}, {47, {TE::Reduce, 53}}, {48, {TE::Reduce, 53}}, {49, {TE::Reduce, 53}}, {50, {TE::Reduce, 53}}, {51, {TE::Reduce, 53}}, {52, {TE::Reduce, 53}}, {53, {TE::Reduce, 53}}, {54, {TE::Reduce, 53}}, {55, {TE::Reduce, 53}}, {56, {TE::Reduce, 53}}, {60, {TE::Reduce, 53}}},
    Row {{17, {TE::Transit, 100}}, {18, {TE::Transit, 20}}, {19, {TE::Transit, 21}}, {20, {TE::Transit, 23}}, {21, {TE::Transit, 24}}, {22, {TE::Transit, 25}}, {23, {TE::Transit, 26}}, {24, {TE::Transit, 27}}, {25, {TE::Transit, 28}}, {26, {TE::Transit, 30}}, {32, {TE::Shift, 31}}, {39, {TE::Shift, 22}}, {57, {TE::Shift, 29}}, {58, {TE::Shift, 32}}, {59, {TE::Shift, 33}}},
    Row {{33, {TE::Reduce, 55}}, {37, {TE::Reduce, 55}}, {45, {TE::Reduce, 55}}, {46, {TE::Reduce, 55}}, {47, {TE::Reduce, 55}}, {48, {TE::Reduce, 55}}, {49, {TE::Reduce, 55}}, {50, {TE::Reduce, 55}}, {51, {TE::Reduce, 55}}, {52, {TE::Reduce, 55}}, {53, {TE::Reduce, 55}}, {54, {TE::Reduce, 55}}, {55, {TE::Reduce, 55}}, {56, {TE::Reduce, 55}}, {60, {TE::Reduce, 55}}},
    Row {{33, {TE::Reduce, 56}}, {37, {TE::Reduce, 56}}, {45, {TE::Reduce, 56}}, {46, {TE::Reduce, 56}}, {47, {TE::Reduce, 56}}, {48, {TE::Reduce, 56}}, {49, {TE::Reduce, 56}}, {50, {TE::Reduce, 56}}, {51, {TE::Reduce, 56}}, {52, {TE::Reduce, 56}}, {53, {TE::Reduce, 56}}, {54, {TE::Reduce, 56}}, {55, {TE::Reduce, 56}}, {56, {TE::Reduce, 56}}, {60, {TE::Reduce, 56}}},
    Row {{1, {TE::Transit, 73}}, {2, {TE::Transit, 3}}, {3, {TE::Transit, 4}}, {4, {TE::Transit, 5}}, {5, {TE::Transit, 7}}, {6, {TE::Transit, 35}}, {7, {TE::Transit, 8}}, {8, {TE::Transit, 9}}, {12, {TE::Transit, 11}}, {13, {TE::Transit, 10}}, {14, {TE::Transit, 18}}, {15, {TE::Transit, 16}}, {16, {TE::Transit, 6}}, {17, {TE::Transit, 17}}, {18, {TE::Transit, 20}}, {19, {TE::Transit, 21}}, {20, {TE::Transit, 23}}, {21, {TE::Transit, 24}}, {22, {TE::Transit, 25}}, {23, {TE::Transit, 26}}, {24, {TE::Transit, 27}}, {25, {TE::Transit, 28}}, {26, {TE::Transit, 30}}, {31, {TE::Shift, 12}}, {32, {TE::Shift, 31}}, {35, {TE::Shift, 13}}, {36, {TE::Shift, 14}}, {38, {TE::Shift, 15}}, {39, {TE::Shift, 22}}, {40, {TE::Shift, 34}}, {42, {TE::Shift, 19}}, {44, {TE::Shift, 36}}, {57, {TE::Shift, 29}}, {58, {TE::Shift, 32}}, {59, {TE::Shift, 33}}},
    Row {{31, {TE::Reduce, 12}}, {32, {TE::Reduce, 12}}, {35, {TE::Reduce, 12}}, {36, {TE::Reduce, 12}}, {38, {TE::Reduce, 12}}, {39, {TE::Reduce, 12}}, {40, {TE::Reduce, 12}}, {41, {TE::Reduce, 12}}, {42, {TE::Reduce, 12}}, {44, {TE::Reduce, 12}}, {57, {TE::Reduce, 12}}, {58, {TE::Reduce, 12}}, {59, {TE::Reduce, 12}}, {61, {TE::Reduce, 12}}},
    Row {{17, {TE::Transit, 117}}, {18, {TE::Transit, 20}}, {19, {TE::Transit, 21}}, {20, {TE::Transit, 23}}, {21, {TE::Transit, 24}}, {22, {TE::Transit, 25}}, {23, {TE::Transit, 26}}, {24, {TE::Transit, 27}}, {25, {TE::Transit, 28}}, {26, {TE::Transit, 30}}, {32, {TE::Shift, 31}}, {39, {TE::Shift, 22}}, {57, {TE::Shift, 29}}, {58, {TE::Shift, 32}}, {59, {TE::Shift, 33}}},
    Row {{31, {TE::Reduce, 3}}, {32, {TE::Reduce, 3}}, {35, {TE::Reduce, 3}}, {36, {TE::Reduce, 3}}, {38, {TE::Reduce, 3}}, {39, {TE::Reduce, 3}}, {40, {TE::Reduce, 3}}, {41, {TE::Reduce, 3}}, {42, {TE::Reduce, 3}}, {44, {TE::Reduce, 3}}, {57, {TE::Reduce, 3}}, {58, {TE::Reduce, 3}}, {59, {TE::Reduce, 3}}, {61, {TE::Reduce, 3}}},
    Row {{17, {TE::Transit, 39}}, {18, {TE::Transit, 20}}, {19, {TE::Transit, 21}}, {20, {TE::Transit, 23}}, {21, {TE::Transit, 24}}, {22, {TE::Transit, 25}}, {23, {TE::Transit, 26}}, {24, {TE::Transit, 27}}, {25, {TE::Transit, 28}}, {26, {TE::Transit, 30}}, {32, {TE::Shift, 31}}, {39, {TE::Shift, 22}}, {57, {TE::Shift, 29}}, {58, {TE::Shift, 32}}, {59, {TE::Shift, 33}}},
    Row {{33, {TE::Shift, 40}}},
    Row {{2, {TE::Transit, 42}}, {3, {TE::Transit, 41}}, {4, {TE::Transit, 5}}, {5, {TE::Transit, 7}}, {6, {TE::Transit, 35}}, {7, {TE::Transit, 8}}, {8, {TE::Transit, 9}}, {12, {TE::Transit, 11}}, {13, {TE::Transit, 10}}, {14, {TE::Transit, 18}}, {15, {TE::Transit, 16}}, {16, {TE::Transit, 6}}, {17, {TE::Transit, 17}}, {18, {TE::Transit, 20}}, {19, {TE::Transit, 21}}, {20, {TE::Transit, 23}}, {21, {TE::Transit, 24}}, {22, {TE::Transit, 25}}, {23, {TE::Transit, 26}}, {24, {TE::Transit, 27}}, {25, {TE::Transit, 28}}, {26, {TE::Transit, 30}}, {31, {TE::Shift, 12}}, {32, {TE::Shift, 31}}, {35, {TE::Shift, 13}}, {36, {TE::Shift, 14}}, {38, {TE::Shift, 15}}, {39, {TE::Shift, 22}}, {40, {TE::Shift, 34}}, {42, {TE::Shift, 19}}, {44, {TE::Shift, 36}}, {57, {TE::Shift, 29}}, {58, {TE::Shift, 32}}, {59, {TE::Shift, 33}}},
    Row {{31, {TE::Reduce, 4}}, {32, {TE::Reduce, 4}}, {34, {TE::Shift, 43}}, {35, {TE::Reduce, 4}}, {36, {TE::Reduce, 4}}, {38, {TE::Reduce, 4}}, {39, {TE::Reduce, 4}}, {40, {TE::Reduce, 4}}, {41, {TE::Reduce, 4}}, {42, {TE::Reduce, 4}}, {44, {TE::Reduce, 4}}, {57, {TE::Reduce, 4}}, {58, {TE::Reduce, 4}}, {59, {TE::Reduce, 4}}, {61, {TE::Reduce, 4}}},
    Row {{31, {TE::Reduce, 14}}, {32, {TE::Reduce, 14}}, {35, {TE::Reduce, 14}}, {36, {TE::Reduce, 14}}, {38, {TE::Reduce, 14}}, {39, {TE::Reduce, 14}}, {40, {TE::Reduce, 14}}, {41, {TE::Reduce, 14}}, {42, {TE::Reduce, 14}}, {44, {TE::Reduce, 14}}, {57, {TE::Reduce, 14}}, {58, {TE::Reduce, 14}}, {59, {TE::Reduce, 14}}, {61, {TE::Reduce, 14}}},
    Row {{3, {TE::Transit, 44}}, {5, {TE::Transit, 7}}, {7, {TE::Transit, 8}}, {8, {TE::Transit, 9}}, {12, {TE::Transit, 11}}, {13, {TE::Transit, 10}}, {14, {TE::Transit, 18}}, {15, {TE::Transit, 16}}, {17, {TE::Transit, 17}}, {18, {TE::Transit, 20}}, {19, {TE::Transit, 21}}, {20, {TE::Transit, 23}}, {21, {TE::Transit, 24}}, {22, {TE::Transit, 25}}, {23, {TE::Transit, 26}}, {24, {TE::Transit, 27}}, {25, {TE::Transit, 28}}, {26, {TE::Transit, 30}}, {31, {TE::Shift, 45}}, {32, {TE::Shift, 31}}, {35, {TE::Shift, 13}}, {36, {TE::Shift, 14}}, {38, {TE::Shift, 15}}, {39, {TE::Shift, 22}}, {40, {TE::Shift, 34}}, {42, {TE::Shift, 19}}, {57, {TE::Shift, 29}}, {58, {TE::Shift, 32}}, {59, {TE::Shift, 33}}},
    Row {{31, {TE::Reduce, 13}}, {32, {TE::Reduce, 13}}, {34, {TE::Reduce, 13}}, {35, {TE::Reduce, 13}}, {36, {TE::Reduce, 13}}, {38, {TE::Reduce, 13}}, {39, {TE::Reduce, 13}}, {40, {TE::Reduce, 13}}, {41, {TE::Reduce, 13}}, {42, {TE::Reduce, 13}}, {44, {TE::Reduce, 13}}, {57, {TE::Reduce, 13}}, {58, {TE::Reduce, 13}}, {59, {TE::Reduce, 13}}, {61, {TE::Reduce, 13}}},
    Row {{32, {TE::Shift, 46}}},
    Row {{17, {TE::Transit, 47}}, {18, {TE::Transit, 20}}, {19, {TE::Transit, 21}}, {20, {TE::Transit, 23}}, {21, {TE::Transit, 24}}, {22, {TE::Transit, 25}}, {23, {TE::Transit, 26}}, {24, {TE::Transit, 27}}, {25, {TE::Transit, 28}}, {26, {TE::Transit, 30}}, {32, {TE::Shift, 31}}, {39, {TE::Shift, 22}}, {57, {TE::Shift, 29}}, {58, {TE::Shift, 32}}, {59, {TE::Shift, 33}}},
    Row {{33, {TE::Shift, 48}}},
    Row {{3, {TE::Transit, 49}}, {5, {TE::Transit, 7}}, {7, {TE::Transit, 8}}, {8, {TE::Transit, 9}}, {12, {TE::Transit, 11}}, {13, {TE::Transit, 10}}, {14, {TE::Transit, 18}}, {15, {TE::Transit, 16}}, {17, {TE::Transit, 17}}, {18, {TE::Transit, 20}}, {19, {TE::Transit, 21}}, {20, {TE::Transit, 23}}, {21, {TE::Transit, 24}}, {22, {TE::Transit, 25}}, {23, {TE::Transit, 26}}, {24, {TE::Transit, 27}}, {25, {TE::Transit, 28}}, {26, {TE::Transit, 30}}, {31, {TE::Shift, 45}}, {32, {TE::Shift, 31}}, {35, {TE::Shift, 13}}, {36, {TE::Shift, 14}}, {38, {TE::Shift, 15}}, {39, {TE::Shift, 22}}, {40, {TE::Shift, 34}}, {42, {TE::Shift, 19}}, {57, {TE::Shift, 29}}, {58, {TE::Shift, 32}}, {59, {TE::Shift, 33}}},
    Row {{34, {TE::Shift, 43}}},
    Row {{17, {TE::Transit, 51}}, {18, {TE::Transit, 20}}, {19, {TE::Transit, 21}}, {20, {TE::Transit, 23}}, {21, {TE::Transit, 24}}, {22, {TE::Transit, 25}}, {23, {TE::Transit, 26}}, {24, {TE::Transit, 27}}, {25, {TE::Transit, 28}}, {26, {TE::Transit, 30}}, {32, {TE::Shift, 31}}, {39, {TE::Shift, 22}}, {57, {TE::Shift, 29}}, {58, {TE::Shift, 32}}, {59, {TE::Shift, 33}}},
    Row {{33, {TE::Shift, 52}}},
    Row {{3, {TE::Transit, 53}}, {5, {TE::Transit, 7}}, {7, {TE::Transit, 8}}, {8, {TE::Transit, 9}}, {12, {TE::Transit, 11}}, {13, {TE::Transit, 10}}, {14, {TE::Transit, 18}}, {15, {TE::Transit, 16}}, {17, {TE::Transit, 17}}, {18, {TE::Transit, 20}}, {19, {TE::Transit, 21}}, {20, {TE::Transit, 23}}, {21, {TE::Transit, 24}}, {22, {TE::Transit, 25}}, {23, {TE::Transit, 26}}, {24, {TE::Transit, 27}}, {25, {TE::Transit, 28}}, {26, {TE::Transit, 30}}, {31, {TE::Shift, 45}}, {32, {TE::Shift, 31}}, {35, {TE::Shift, 13}}, {36, {TE::Shift, 14}}, {38, {TE::Shift, 15}}, {39, {TE::Shift, 22}}, {40, {TE::Shift, 34}}, {42, {TE::Shift, 19}}, {57, {TE::Shift, 29}}, {58, {TE::Shift, 32}}, {59, {TE::Shift, 33}}},
    Row {{31, {TE::Reduce, 15}}, {32, {TE::Reduce, 15}}, {34, {TE::Reduce, 15}}, {35, {TE::Reduce, 15}}, {36, {TE::Reduce, 15}}, {38, {TE::Reduce, 15}}, {39, {TE::Reduce, 15}}, {40, {TE::Reduce, 15}}, {41, {TE::Reduce, 15}}, {42, {TE::Reduce, 15}}, {44, {TE::Reduce, 15}}, {57, {TE::Reduce, 15}}, {58, {TE::Reduce, 15}}, {59, {TE::Reduce, 15}}, {61, {TE::Reduce, 15}}},
    Row {{9, {TE::Transit, 55}}, {15, {TE::Transit, 56}}, {17, {TE::Transit, 57}}, {18, {TE::Transit, 20}}, {19, {TE::Transit, 21}}, {20, {TE::Transit, 23}}, {21, {TE::Transit, 24}}, {22, {TE::Transit, 25}}, {23, {TE::Transit, 26}}, {24, {TE::Transit, 27}}, {25, {TE::Transit, 28}}, {26, {TE::Transit, 30}}, {32, {TE::Shift, 31}}, {37, {TE::Reduce, 19}}, {39, {TE::Shift, 22}}, {42, {TE::Shift, 19}}, {57, {TE::Shift, 29}}, {58, {TE::Shift, 32}}, {59, {TE::Shift, 33}}},
    Row {{37, {TE::Shift, 58}}},
    Row {{37, {TE::Reduce, 17}}},
    Row {{37, {TE::Reduce, 18}}},
    Row {{10, {TE::Transit, 59}}, {17, {TE::Transit, 60}}, {18, {TE::Transit, 20}}, {19, {TE::Transit, 21}}, {20, {TE::Transit, 23}}, {21, {TE::Transit, 24}}, {22, {TE::Transit, 25}}, {23, {TE::Transit, 26}}, {24, {TE::Transit, 27}}, {25, {TE::Transit, 28}}, {26, {TE::Transit, 30}}, {32, {TE::Shift, 31}}, {37, {TE::Reduce, 21}}, {39, {TE::Shift, 22}}, {57, {TE::Shift, 29}}, {58, {TE::Shift, 32}}, {59, {TE::Shift, 33}}},
    Row {{37, {TE::Shift, 61}}},
    Row {{37, {TE::Reduce, 20}}},
    Row {{11, {TE::Transit, 62}}, {17, {TE::Transit, 63}}, {18, {TE::Transit, 20}}, {19, {TE::Transit, 21}}, {20, {TE::Transit, 23}}, {21, {TE::Transit, 24}}, {22, {TE::Transit, 25}}, {23, {TE::Transit, 26}}, {24, {TE::Transit, 27}}, {25, {TE::Transit, 28}}, {26, {TE::Transit, 30}}, {32, {TE::Shift, 31}}, {33, {TE::Reduce, 23}}, {39, {TE::Shift, 22}}, {57, {TE::Shift, 29}}, {58, {TE::Shift, 32}}, {59, {TE::Shift, 33}}},
    Row {{33, {TE::Shift, 64}}},
    Row {{33, {TE::Reduce, 22}}},
    Row {{3, {TE::Transit, 65}}, {5, {TE::Transit, 7}}, {7, {TE::Transit, 8}}, {8, {TE::Transit, 9}}, {12, {TE::Transit, 11}}, {13, {TE::Transit, 10}}, {14, {TE::Transit, 18}}, {15, {TE::Transit, 16}}, {17, {TE::Transit, 17}}, {18, {TE::Transit, 20}}, {19, {TE::Transit, 21}}, {20, {TE::Transit, 23}}, {21, {TE::Transit, 24}}, {22, {TE::Transit, 25}}, {23, {TE::Transit, 26}}, {24, {TE::Transit, 27}}, {25, {TE::Transit, 28}}, {26, {TE::Transit, 30}}, {31, {TE::Shift, 45}}, {32, {TE::Shift, 31}}, {35, {TE::Shift, 13}}, {36, {TE::Shift, 14}}, {38, {TE::Shift, 15}}, {39, {TE::Shift, 22}}, {40, {TE::Shift, 34}}, {42, {TE::Shift, 19}}, {57, {TE::Shift, 29}}, {58, {TE::Shift, 32}}, {59, {TE::Shift, 33}}},
    Row {{31, {TE::Reduce, 16}}, {32, {TE::Reduce, 16}}, {34, {TE::Reduce, 16}}, {35, {TE::Reduce, 16}}, {36, {TE::Reduce, 16}}, {38, {TE::Reduce, 16}}, {39, {TE::Reduce, 16}}, {40, {TE::Reduce, 16}}, {41, {TE::Reduce, 16}}, {42, {TE::Reduce, 16}}, {44, {TE::Reduce, 16}}, {57, {TE::Reduce, 16}}, {58, {TE::Reduce, 16}}, {59, {TE::Reduce, 16}}, {61, {TE::Reduce, 16}}},
    Row {{32, {TE::Shift, 67}}},
    Row {{27, {TE::Transit, 68}}, {28, {TE::Transit, 69}}, {33, {TE::Reduce, 59}}, {39, {TE::Shift, 70}}},
    Row {{33, {TE::Shift, 71}}},
    Row {{33, {TE::Reduce, 60}}, {60, {TE::Shift, 119}}},
    Row {{33, {TE::Reduce, 61}}, {60, {TE::Reduce, 61}}},
    Row {{14, {TE::Transit, 72}}, {40, {TE::Shift, 34}}},
    Row {{31, {TE::Reduce, 27}}, {32, {TE::Reduce, 27}}, {34, {TE::Reduce, 27}}, {35, {TE::Reduce, 27}}, {36, {TE::Reduce, 27}}, {38, {TE::Reduce, 27}}, {39, {TE::Reduce, 27}}, {40, {TE::Reduce, 27}}, {41, {TE::Reduce, 27}}, {42, {TE::Reduce, 27}}, {44, {TE::Reduce, 27}}, {57, {TE::Reduce, 27}}, {58, {TE::Reduce, 27}}, {59, {TE::Reduce, 27}}, {61, {TE::Reduce, 27}}},
    Row {{2, {TE::Transit, 37}}, {3, {TE::Transit, 4}}, {4, {TE::Transit, 5}}, {5, {TE::Transit, 7}}, {6, {TE::Transit, 35}}, {7, {TE::Transit, 8}}, {8, {TE::Transit, 9}}, {12, {TE::Transit, 11}}, {13, {TE::Transit, 10}}, {14, {TE::Transit, 18}}, {15, {TE::Transit, 16}}, {16, {TE::Transit, 6}}, {17, {TE::Transit, 17}}, {18, {TE::Transit, 20}}, {19, {TE::Transit, 21}}, {20, {TE::Transit, 23}}, {21, {TE::Transit, 24}}, {22, {TE::Transit, 25}}, {23, {TE::Transit, 26}}, {24, {TE::Transit, 27}}, {25, {TE::Transit, 28}}, {26, {TE::Transit, 30}}, {31, {TE::Shift, 12}}, {32, {TE::Shift, 31}}, {35, {TE::Shift, 13}}, {36, {TE::Shift, 14}}, {38, {TE::Shift, 15}}, {39, {TE::Shift, 22}}, {40, {TE::Shift, 34}}, {41, {TE::Shift, 74}}, {42, {TE::Shift, 19}}, {44, {TE::Shift, 36}}, {57, {TE::Shift, 29}}, {58, {TE::Shift, 32}}, {59, {TE::Shift, 33}}},
    Row {{31, {TE::Reduce, 28}}, {32, {TE::Reduce, 28}}, {34, {TE::Reduce, 28}}, {35, {TE::Reduce, 28}}, {36, {TE::Reduce, 28}}, {38, {TE::Reduce, 28}}, {39, {TE::Reduce, 28}}, {40, {TE::Reduce, 28}}, {41, {TE::Reduce, 28}}, {42, {TE::Reduce, 28}}, {44, {TE::Reduce, 28}}, {57, {TE::Reduce, 28}}, {58, {TE::Reduce, 28}}, {59, {TE::Reduce, 28}}, {61, {TE::Reduce, 28}}},
    Row {{31, {TE::Reduce, 24}}, {32, {TE::Reduce, 24}}, {34, {TE::Reduce, 24}}, {35, {TE::Reduce, 24}}, {36, {TE::Reduce, 24}}, {38, {TE::Reduce, 24}}, {39, {TE::Reduce, 24}}, {40, {TE::Reduce, 24}}, {41, {TE::Reduce, 24}}, {42, {TE::Reduce, 24}}, {44, {TE::Reduce, 24}}, {57, {TE::Reduce, 24}}, {58, {TE::Reduce, 24}}, {59, {TE::Reduce, 24}}, {61, {TE::Reduce, 24}}},
    Row {{31, {TE::Reduce, 25}}, {32, {TE::Reduce, 25}}, {34, {TE::Reduce, 25}}, {35, {TE::Reduce, 25}}, {36, {TE::Reduce, 25}}, {38, {TE::Reduce, 25}}, {39, {TE::Reduce, 25}}, {40, {TE::Reduce, 25}}, {41, {TE::Reduce, 25}}, {42, {TE::Reduce, 25}}, {44, {TE::Reduce, 25}}, {57, {TE::Reduce, 25}}, {58, {TE::Reduce, 25}}, {59, {TE::Reduce, 25}}, {61, {TE::Reduce, 25}}},
    Row {{43, {TE::Shift, 78}}},
    Row {{17, {TE::Transit, 79}}, {18, {TE::Transit, 20}}, {19, {TE::Transit, 21}}, {20, {TE::Transit, 23}}, {21, {TE::Transit, 24}}, {22, {TE::Transit, 25}}, {23, {TE::Transit, 26}}, {24, {TE::Transit, 27}}, {25, {TE::Transit, 28}}, {26, {TE::Transit, 30}}, {32, {TE::Shift, 31}}, {39, {TE::Shift, 22}}, {57, {TE::Shift, 29}}, {58, {TE::Shift, 32}}, {59, {TE::Shift, 33}}},
    Row {{37, {TE::Reduce, 29}}},
    Row {{20, {TE::Transit, 81}}, {21, {TE::Transit, 24}}, {22, {TE::Transit, 25}}, {23, {TE::Transit, 26}}, {24, {TE::Transit, 27}}, {25, {TE::Transit, 28}}, {26, {TE::Transit, 30}}, {32, {TE::Shift, 31}}, {39, {TE::Shift, 82}}, {57, {TE::Shift, 29}}, {58, {TE::Shift, 32}}, {59, {TE::Shift, 33}}},
    Row {{33, {TE::Reduce, 34}}, {37, {TE::Reduce, 34}}, {45, {TE::Reduce, 34}}, {46, {TE::Shift, 83}}, {60, {TE::Reduce, 34}}},
    Row {{32, {TE::Shift, 103}}, {33, {TE::Reduce, 58}}, {37, {TE::Reduce, 58}}, {45, {TE::Reduce, 58}}, {46, {TE::Reduce, 58}}, {47, {TE::Reduce, 58}}, {48, {TE::Reduce, 58}}, {49, {TE::Reduce, 58}}, {50, {TE::Reduce, 58}}, {51, {TE::Reduce, 58}}, {52, {TE::Reduce, 58}}, {53, {TE::Reduce, 58}}, {54, {TE::Reduce, 58}}, {55, {TE::Reduce, 58}}, {56, {TE::Reduce, 58}}, {60, {TE::Reduce, 58}}},
    Row {{21, {TE::Transit, 84}}, {22, {TE::Transit, 25}}, {23, {TE::Transit, 26}}, {24, {TE::Transit, 27}}, {25, {TE::Transit, 28}}, {26, {TE::Transit, 30}}, {32, {TE::Shift, 31}}, {39, {TE::Shift, 82}}, {57, {TE::Shift, 29}}, {58, {TE::Shift, 32}}, {59, {TE::Shift, 33}}},
    Row {{33, {TE::Reduce, 36}}, {37, {TE::Reduce, 36}}, {45, {TE::Reduce, 36}}, {46, {TE::Reduce, 36}}, {47, {TE::Shift, 85}}, {48, {TE::Shift, 86}}, {60, {TE::Reduce, 36}}},
    Row {{22, {TE::Transit, 87}}, {23, {TE::Transit, 26}}, {24, {TE::Transit, 27}}, {25, {TE::Transit, 28}}, {26, {TE::Transit, 30}}, {32, {TE::Shift, 31}}, {39, {TE::Shift, 82}}, {57, {TE::Shift, 29}}, {58, {TE::Shift, 32}}, {59, {TE::Shift, 33}}},
    Row {{22, {TE::Transit, 105}}, {23, {TE::Transit, 26}}, {24, {TE::Transit, 27}}, {25, {TE::Transit, 28}}, {26, {TE::Transit, 30}}, {32, {TE::Shift, 31}}, {39, {TE::Shift, 82}}, {57, {TE::Shift, 29}}, {58, {TE::Shift, 32}}, {59, {TE::Shift, 33}}},
    Row {{33, {TE::Reduce, 38}}, {37, {TE::Reduce, 38}}, {45, {TE::Reduce, 38}}, {46, {TE::Reduce, 38}}, {47, {TE::Reduce, 38}}, {48, {TE::Reduce, 38}}, {49, {TE::Shift, 88}}, {50, {TE::Shift, 89}}, {51, {TE::Shift, 90}}, {52, {TE::Shift, 91}}, {60, {TE::Reduce, 38}}},
    Row {{23, {TE::Transit, 92}}, {24, {TE::Transit, 27}}, {25, {TE::Transit, 28}}, {26, {TE::Transit, 30}}, {32, {TE::Shift, 31}}, {39, {TE::Shift, 82}}, {57, {TE::Shift, 29}}, {58, {TE::Shift, 32}}, {59, {TE::Shift, 33}}},
    Row {{23, {TE::Transit, 106}}, {24, {TE::Transit, 27}}, {25, {TE::Transit, 28}}, {26, {TE::Transit, 30}}, {32, {TE::Shift, 31}}, {39, {TE::Shift, 82}}, {57, {TE::Shift, 29}}, {58, {TE::Shift, 32}}, {59, {TE::Shift, 33}}},
    Row {{23, {TE::Transit, 115}}, {24, {TE::Transit, 27}}, {25, {TE::Transit, 28}}, {26, {TE::Transit, 30}}, {32, {TE::Shift, 31}}, {39, {TE::Shift, 82}}, {57, {TE::Shift, 29}}, {58, {TE::Shift, 32}}, {59, {TE::Shift, 33}}},
    Row {{23, {TE::Transit, 116}}, {24, {TE::Transit, 27}}, {25, {TE::Transit, 28}}, {26, {TE::Transit, 30}}, {32, {TE::Shift, 31}}, {39, {TE::Shift, 82}}, {57, {TE::Shift, 29}}, {58, {TE::Shift, 32}}, {59, {TE::Shift, 33}}},
    Row {{33, {TE::Reduce, 41}}, {37, {TE::Reduce, 41}}, {45, {TE::Reduce, 41}}, {46, {TE::Reduce, 41}}, {47, {TE::Reduce, 41}}, {48, {TE::Reduce, 41}}, {49, {TE::Reduce, 41}}, {50, {TE::Reduce, 41}}, {51, {TE::Reduce, 41}}, {52, {TE::Reduce, 41}}, {53, {TE::Shift, 93}}, {54, {TE::Shift, 94}}, {60, {TE::Reduce, 41}}},
    Row {{24, {TE::Transit, 95}}, {25, {TE::Transit, 28}}, {26, {TE::Transit, 30}}, {32, {TE::Shift, 31}}, {39, {TE::Shift, 82}}, {57, {TE::Shift, 29}}, {58, {TE::Shift, 32}}, {59, {TE::Shift, 33}}},
    Row {{24, {TE::Transit, 107}}, {25, {TE::Transit, 28}}, {26, {TE::Transit, 30}}, {32, {TE::Shift, 31}}, {39, {TE::Shift, 82}}, {57, {TE::Shift, 29}}, {58, {TE::Shift, 32}}, {59, {TE::Shift, 33}}},
    Row {{33, {TE::Reduce, 46}}, {37, {TE::Reduce, 46}}, {45, {TE::Reduce, 46}}, {46, {TE::Reduce, 46}}, {47, {TE::Reduce, 46}}, {48, {TE::Reduce, 46}}, {49, {TE::Reduce, 46}}, {50, {TE::Reduce, 46}}, {51, {TE::Reduce, 46}}, {52, {TE::Reduce, 46}}, {53, {TE::Reduce, 46}}, {54, {TE::Reduce, 46}}, {55, {TE::Shift, 96}}, {56, {TE::Shift, 97}}, {60, {TE::Reduce, 46}}},
    Row {{25, {TE::Transit, 98}}, {26, {TE::Transit, 30}}, {32, {TE::Shift, 31}}, {39, {TE::Shift, 82}}, {57, {TE::Shift, 29}}, {58, {TE::Shift, 32}}, {59, {TE::Shift, 33}}},
    Row {{25, {TE::Transit, 108}}, {26, {TE::Transit, 30}}, {32, {TE::Shift, 31}}, {39, {TE::Shift, 82}}, {57, {TE::Shift, 29}}, {58, {TE::Shift, 32}}, {59, {TE::Shift, 33}}},
    Row {{33, {TE::Reduce, 49}}, {37, {TE::Reduce, 49}}, {45, {TE::Reduce, 49}}, {46, {TE::Reduce, 49}}, {47, {TE::Reduce, 49}}, {48, {TE::Reduce, 49}}, {49, {TE::Reduce, 49}}, {50, {TE::Reduce, 49}}, {51, {TE::Reduce, 49}}, {52, {TE::Reduce, 49}}, {53, {TE::Reduce, 49}}, {54, {TE::Reduce, 49}}, {55, {TE::Reduce, 49}}, {56, {TE::Reduce, 49}}, {60, {TE::Reduce, 49}}},
    Row {{33, {TE::Reduce, 52}}, {37, {TE::Reduce, 52}}, {45, {TE::Reduce, 52}}, {46, {TE::Reduce, 52}}, {47, {TE::Reduce, 52}}, {48, {TE::Reduce, 52}}, {49, {TE::Reduce, 52}}, {50, {TE::Reduce, 52}}, {51, {TE::Reduce, 52}}, {52, {TE::Reduce, 52}}, {53, {TE::Reduce, 52}}, {54, {TE::Reduce, 52}}, {55, {TE::Reduce, 52}}, {56, {TE::Reduce, 52}}, {60, {TE::Reduce, 52}}},
    Row {{33, {TE::Shift, 101}}},
    Row {{33, {TE::Reduce, 54}}, {37, {TE::Reduce, 54}}, {45, {TE::Reduce, 54}}, {46, {TE::Reduce, 54}}, {47, {TE::Reduce, 54}}, {48, {TE::Reduce, 54}}, {49, {TE::Reduce, 54}}, {50, {TE::Reduce, 54}}, {51, {TE::Reduce, 54}}, {52, {TE::Reduce, 54}}, {53, {TE::Reduce, 54}}, {54, {TE::Reduce, 54}}, {55, {TE::Reduce, 54}}, {56, {TE::Reduce, 54}}, {60, {TE::Reduce, 54}}},
    Row {{17, {TE::Transit, 104}}, {18, {TE::Transit, 20}}, {19, {TE::Transit, 21}}, {20, {TE::Transit, 23}}, {21, {TE::Transit, 24}}, {22, {TE::Transit, 25}}, {23, {TE::Transit, 26}}, {24, {TE::Transit, 27}}, {25, {TE::Transit, 28}}, {26, {TE::Transit, 30}}, {32, {TE::Shift, 31}}, {39, {TE::Shift, 22}}, {57, {TE::Shift, 29}}, {58, {TE::Shift, 32}}, {59, {TE::Shift, 33}}},
    Row {{17, {TE::Transit, 111}}, {18, {TE::Transit, 20}}, {19, {TE::Transit, 21}}, {20, {TE::Transit, 23}}, {21, {TE::Transit, 24}}, {22, {TE::Transit, 25}}, {23, {TE::Transit, 26}}, {24, {TE::Transit, 27}}, {25, {TE::Transit, 28}}, {26, {TE::Transit, 30}}, {29, {TE::Transit, 109}}, {30, {TE::Transit, 110}}, {32, {TE::Shift, 31}}, {33, {TE::Reduce, 63}}, {39, {TE::Shift, 22}}, {57, {TE::Shift, 29}}, {58, {TE::Shift, 32}}, {59, {TE::Shift, 33}}},
    Row {{33, {TE::Reduce, 33}}, {37, {TE::Reduce, 33}}, {60, {TE::Reduce, 33}}},
    Row {{33, {TE::Reduce, 39}}, {37, {TE::Reduce, 39}}, {45, {TE::Reduce, 39}}, {46, {TE::Reduce, 39}}, {47, {TE::Reduce, 39}}, {48, {TE::Reduce, 39}}, {49, {TE::Shift, 88}}, {50, {TE::Shift, 89}}, {51, {TE::Shift, 90}}, {52, {TE::Shift, 91}}, {60, {TE::Reduce, 39}}},
    Row {{33, {TE::Reduce, 42}}, {37, {TE::Reduce, 42}}, {45, {TE::Reduce, 42}}, {46, {TE::Reduce, 42}}, {47, {TE::Reduce, 42}}, {48, {TE::Reduce, 42}}, {49, {TE::Reduce, 42}}, {50, {TE::Reduce, 42}}, {51, {TE::Reduce, 42}}, {52, {TE::Reduce, 42}}, {53, {TE::Shift, 93}}, {54, {TE::Shift, 94}}, {60, {TE::Reduce, 42}}},
    Row {{33, {TE::Reduce, 47}}, {37, {TE::Reduce, 47}}, {45, {TE::Reduce, 47}}, {46, {TE::Reduce, 47}}, {47, {TE::Reduce, 47}}, {48, {TE::Reduce, 47}}, {49, {TE::Reduce, 47}}, {50, {TE::Reduce, 47}}, {51, {TE::Reduce, 47}}, {52, {TE::Reduce, 47}}, {53, {TE::Reduce, 47}}, {54, {TE::Reduce, 47}}, {55, {TE::Shift, 96}}, {56, {TE::Shift, 97}}, {60, {TE::Reduce, 47}}},
    Row {{33, {TE::Reduce, 50}}, {37, {TE::Reduce, 50}}, {45, {TE::Reduce, 50}}, {46, {TE::Reduce, 50}}, {47, {TE::Reduce, 50}}, {48, {TE::Reduce, 50}}, {49, {TE::Reduce, 50}}, {50, {TE::Reduce, 50}}, {51, {TE::Reduce, 50}}, {52, {TE::Reduce, 50}}, {53, {TE::Reduce, 50}}, {54, {TE::Reduce, 50}}, {55, {TE::Reduce, 50}}, {56, {TE::Reduce, 50}}, {60, {TE::Reduce, 50}}},
    Row {{33, {TE::Shift, 112}}},
    Row {{33, {TE::Reduce, 64}}, {60, {TE::Shift, 113}}},
    Row {{33, {TE::Reduce, 65}}, {60, {TE::Reduce, 65}}},
    Row {{33, {TE::Reduce, 57}}, {37, {TE::Reduce, 57}}, {45, {TE::Reduce, 57}}, {46, {TE::Reduce, 57}}, {47, {TE::Reduce, 57}}, {48, {TE::Reduce, 57}}, {49, {TE::Reduce, 57}}, {50, {TE::Reduce, 57}}, {51, {TE::Reduce, 57}}, {52, {TE::Reduce, 57}}, {53, {TE::Reduce, 57}}, {54, {TE::Reduce, 57}}, {55, {TE::Reduce, 57}}, {56, {TE::Reduce, 57}}, {60, {TE::Reduce, 57}}},
    Row {{17, {TE::Transit, 114}}, {18, {TE::Transit, 20}}, {19, {TE::Transit, 21}}, {20, {TE::Transit, 23}}, {21, {TE::Transit, 24}}, {22, {TE::Transit, 25}}, {23, {TE::Transit, 26}}, {24, {TE::Transit, 27}}, {25, {TE::Transit, 28}}, {26, {TE::Transit, 30}}, {32, {TE::Shift, 31}}, {39, {TE::Shift, 22}}, {57, {TE::Shift, 29}}, {58, {TE::Shift, 32}}, {59, {TE::Shift, 33}}},
    Row {{33, {TE::Reduce, 66}}, {60, {TE::Reduce, 66}}},
    Row {{33, {TE::Reduce, 43}}, {37, {TE::Reduce, 43}}, {45, {TE::Reduce, 43}}, {46, {TE::Reduce, 43}}, {47, {TE::Reduce, 43}}, {48, {TE::Reduce, 43}}, {49, {TE::Reduce, 43}}, {50, {TE::Reduce, 43}}, {51, {TE::Reduce, 43}}, {52, {TE::Reduce, 43}}, {53, {TE::Shift, 93}}, {54, {TE::Shift, 94}}, {60, {TE::Reduce, 43}}},
    Row {{33, {TE::Reduce, 44}}, {37, {TE::Reduce, 44}}, {45, {TE::Reduce, 44}}, {46, {TE::Reduce, 44}}, {47, {TE::Reduce, 44}}, {48, {TE::Reduce, 44}}, {49, {TE::Reduce, 44}}, {50, {TE::Reduce, 44}}, {51, {TE::Reduce, 44}}, {52, {TE::Reduce, 44}}, {53, {TE::Shift, 93}}, {54, {TE::Shift, 94}}, {60, {TE::Reduce, 44}}},
    Row {{37, {TE::Shift, 118}}},
    Row {{31, {TE::Reduce, 30}}, {32, {TE::Reduce, 30}}, {35, {TE::Reduce, 30}}, {36, {TE::Reduce, 30}}, {38, {TE::Reduce, 30}}, {39, {TE::Reduce, 30}}, {40, {TE::Reduce, 30}}, {41, {TE::Reduce, 30}}, {42, {TE::Reduce, 30}}, {44, {TE::Reduce, 30}}, {57, {TE::Reduce, 30}}, {58, {TE::Reduce, 30}}, {59, {TE::Reduce, 30}}, {61, {TE::Reduce, 30}}},
    Row {{39, {TE::Shift, 120}}},
    Row {{33, {TE::Reduce, 62}}, {60, {TE::Reduce, 62}}}
};
// clang-format on

}  // namespace syntax

#endif